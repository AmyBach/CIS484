import java.util.*;
import javafx.application.Application;
import javafx.event.*;
import javafx.scene.*;
import javafx.collections.*;
import javafx.geometry.Pos;
import javafx.stage.*;
import java.time.LocalDateTime;


public class CustomerOrder {

    static void add(CustomerOrder customerOrder) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    static Object get(int selectedIndex) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    
    public int customerOrderQuantity;

    public LocalDateTime orderDate;

    private Customer customerInfo;

    public ArrayList<Product> ShoppingCart = new ArrayList<Product>();
    
    public ArrayList<Integer> ItemQuantities = new ArrayList<Integer>();

    private int customerOrderID;
    private static int nextID = 0;


    public CustomerOrder(Customer customerOrder)

        {

            this.orderDate = LocalDateTime.now();

            this.customerInfo = customerOrder; 

            this.customerOrderID = nextID++;

        }

    

    public String describeSale()

        {

            String describeSale = " ";

            String custName;

            custName = customerInfo.getCustomerName();


            describeSale    += "Customer Name:\t" + custName + ",\t"

                            + "Quantity: " + this.customerOrderQuantity + ",\t"

                            + "Date: " + this.orderDate;



            return describeSale;

        }
    
    public void calculateOrderQuantity()
    {
        for(int i = 0; i < ItemQuantities.size(); i++)
            {
                this.customerOrderQuantity += ItemQuantities.get(i);
            }
    }
    
    public void addToCart(Product p)
    {
        this.ShoppingCart.add(p);
    }
    
    public void addQuantities(int amount)
    {
        this.ItemQuantities.add(amount);
    }
    
    public String discountApplied(boolean status)
    {
        String applied = "";
        
        if(status == true)
        {
            applied = "Yes";
        }
        else
        {
            applied = "No";
        }
        
        return applied;
    }
    
    public double applyDiscount(boolean status, double price, double discount, int quantity)
    {
        double total = 0.0;
        
        if(status == true)
        {
            total = discount * quantity;
        }
        else
        {
            total = price * quantity;
        }
        
        return total;
        
    }

  

    public int getCustomerOrderID() {

        return this.customerOrderID;

    }



    public int getQuantity() {

        return customerOrderQuantity;

    }



    public String getOrderDate() {

        return String.valueOf(orderDate);

    }



    public Customer getCustomerInfo() {

        return customerInfo;

    }



    public String getProductInfo() {

        String info = "\nItem Quantity,\tProduct,\tDiscount Applied,\tProduct Total\n\n";
        
        for(Product p: ShoppingCart)
        {
            info += String.format(this.ItemQuantities.get(this.ShoppingCart.indexOf(p)) + 

                    "\t" + p.getProductName() + "\t$%.2f\n", applyDiscount(this.customerInfo.getClubMember(), 

                            p.getSalePrice(), p.getDiscountSalePrice(), 

                            this.ItemQuantities.get(this.ShoppingCart.indexOf(p))));
        }
        
        return info;

    }
    
    public double getGrandTotal()
    {
        double grandTotal = 0.0;
        
        for(Product p: ShoppingCart)
        {
            grandTotal += applyDiscount(this.customerInfo.getClubMember(), 
                            p.getSalePrice(), p.getDiscountSalePrice(), 
                            this.ItemQuantities.get(this.ShoppingCart.indexOf(p)));
        }
        
        return grandTotal;
    }

    public String displayOrder()
    {
        return "Sale ID: " + this.getCustomerOrderID() + ", Date: " + 
                
                this.orderDate + ", Customer Name: " + this.customerInfo.getCustomerName() +

                "\nDiscount Applied: " + this.discountApplied(this.getCustomerInfo().getClubMember()) + 
                
                "\n------------------------------------\n Product Sold: " + this.getProductInfo();
    }
   

    @Override

    public String toString() {
        
        return String.format("Sale ID: " + this.getCustomerOrderID() + ", Date: " + 
                
                this.orderDate + ", Customer Name: " + this.customerInfo.getCustomerName() +
                
                "\nDiscount Applied: " + this.discountApplied(this.getCustomerInfo().getClubMember()) +

                "\n------------------------------------\n Product Sold: " + this.getProductInfo() +

                "--------------------------------------\nTotal: $%.2f", this.getGrandTotal());
                

    }

       

}
