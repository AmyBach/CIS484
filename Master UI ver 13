import java.util.*;
import java.time.LocalDate;
import java.util.ArrayList;
import javafx.application.Application;
import static javafx.application.Application.launch;
import javafx.collections.*;
import javafx.event.*;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.*;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;
import java.sql.*;
import oracle.jdbc.pool.*;

import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

public class GPApp extends Application { 


 public static ArrayList<Employee> Employee = new ArrayList<Employee>();
 public static ArrayList<Schedule> Shifts = new ArrayList<Schedule>();
 public static ArrayList<Customer> Customer = new ArrayList<Customer>();
 public static ArrayList<Product> Product = new ArrayList<Product>();
 public static ArrayList<Supplier> Supplier = new ArrayList<Supplier>();
 public static ArrayList<Expense> Expense = new ArrayList<Expense>();
 public static ArrayList<Customer> ClubMembers = new ArrayList<Customer>();
 public static ArrayList<CustomerOrder> CustomerOrder = new ArrayList<CustomerOrder>();

 
Connection dbConn;
Statement cmmtStmt;
ResultSet dbResults;


    // Create Log In Pane
    GridPane loginPane = new GridPane();
    GridPane logTimePane = new GridPane();


    // Create primary pane
    GridPane primaryPane = new GridPane();
    GridPane posPane = new GridPane();
    GridPane managePane = new GridPane();
    GridPane reportsPane = new GridPane();

    

    // Employee Panes
    GridPane employeePane = new GridPane();
    GridPane addEmployeePane = new GridPane();
    GridPane updateEmployeePane = new GridPane();
    

    // Inventory Panes
    GridPane inventoryPane = new GridPane(); 
    GridPane addProductPane = new GridPane();
    GridPane updateProdPane = new GridPane();
    
    // Expense Panes
    GridPane expensePane = new GridPane();
    GridPane addExpensePane = new GridPane();
    GridPane editExpensePane = new GridPane(); 

    // Supplier Panes

    GridPane supplierPane = new GridPane();
    GridPane addSupplierPane = new GridPane();
    GridPane updateSupplierPane = new GridPane();

    // Schedule Panes
    GridPane schedulePane = new GridPane();    

     // Customer Panes
    GridPane custAcctPane = new GridPane();    
    GridPane manageCustPane;   
    GridPane editCustPane;
    
    // Report Panes
    GridPane salesReportPane = new GridPane();
    GridPane empReportsPane = new GridPane();
    GridPane mnthlyExpReportsPane = new GridPane();
    GridPane profVsExpPane = new GridPane();
    
    // Shooping Cart Pane
    GridPane shopCartPane;
    // Receipt Pane
    GridPane receiptPane;

    TabPane tbPane = new TabPane();
    Tab tab1 = new Tab("POS");
    Tab tab2 = new Tab("Manage");
    Tab tab3 = new Tab("Reports");

    // Buttons
    Button btnEmployees = new Button("Employees"); // Manage Page
    Button btnExpenses = new Button("Expenses");
    Button btnInventory = new Button("Inventory"); 
    Button btnSchedule = new Button("Schedule");
    Button btnSupplier = new Button("Supplier");
    Button btnGenerate = new Button("Generate"); // Reports Page
    Button btnSalesReports = new Button("Sales Reports");
    Button btnEmployeeReports = new Button("Employee Reports");
    Button btnGenEmpReports = new Button("Generate Report");
    Button btnMnthlyExpReports = new Button("Monthly Expense Reports");  
    Button btnViewExpenses = new Button("View Expense Report");
    Button btnProfvsExp = new Button("Profits Vs. Expenses");
    Button btnAddSup = new Button("Add New Supplier"); // Supplier buttons
    Button btnRemSup = new Button("Remove Supplier");
    Button btnUpdateSup = new Button("Update Supplier");
    Button btnAddNewSup = new Button("Add New Supplier"); // Supplier Button
    Button btnUpdateSup2 = new Button("Update Supplier");
    Button btnChangeImage = new Button("Change Image"); // Inventory Buttons
    Button btnAddNewProd = new Button("Add New Product");
    Button btnUpdateEmp = new Button("Update Employee"); // Employee Buttons
    Button btnAddNewEmp = new Button("Add New Employee");
    Button btnAddEmp = new Button("Add Employee"); // Button to ADD NEW EMPLOYEE
    Button btnPrint = new Button("Print Receipt"); // POS Page
    Button btnCreateCustAccount = new Button("Create Customer");
    Button btnNewCustAccount = new Button("Create Customer");
    Button btnAddEmpSch = new Button("Add to Schedule"); // Schedule Button
    Button btnAddExpense = new Button("Add Expense"); // Expense Buttons
    Button btnRemoveExpense = new Button("Remove Expense");
    Button btnAddNewExpense = new Button("Add New Expense");
    Button btnEditEx = new Button("Edit Expense");
    Button btnUpdateEx = new Button("Update Expense");
    Button btnFilter = new Button("Filter");
    Button btnSaveChanges = new Button("Save Changes"); //update employee
    Button btnAddProd = new Button("Add Product");
    Button btnUpdateProd = new Button("Update Product");
    Button btnManageCust = new Button("Manage Customer");   
    Button btnEditCust = new Button("Edit Customer");
    Button btnEditCustInfo = new Button("Edit Customer Info");
    
    Button btnDisSup = new Button("Display Supplier"); 
    //For POS 
    Button btnAddShopCart = new Button("Add Items to Cart");
    Button btnAddProdCart = new Button("Add to Cart");

    //Radio Buttons
    RadioButton rdbExpPaid = new RadioButton("Paid");
    RadioButton rdbExpUnpaid = new RadioButton("Unpaid");
    RadioButton rdbExpPaid2 = new RadioButton("Paid");
    RadioButton rdbExpUnpaid2 = new RadioButton("Unpaid");

     // Create Toggle Group for update/remove employee
    ToggleGroup tGroup = new ToggleGroup();
    RadioButton rbUpdateEmp = new RadioButton("Update Employee");
    RadioButton rbRemoveEmp = new RadioButton("Remove Employee");

    //Toggle group
    ToggleGroup btnExpGroup = new ToggleGroup();

    // Labels
    Label lblRType = new Label("Report Type: "); // Reports
    Label lblSNum = new Label("Store #: ");
    Label lblMonth = new Label("Please select month: ");
    Label lblTotalExp = new Label("Total Monthly Expenses: ");
    Label lblEmp = new Label("Please select employee: ");
    Label lblExpense = new Label("Current Expenses: ");
    Label lblExpFilter = new Label("Filter by: ");
    Label lblSupplier = new Label("Select Supplier: ");
    Label lblInventory = new Label("Inventory: ");
    Label lblEmployee = new Label("Employees: ");
    Label lblTotal = new Label("Total:");
    Label lblEmpName = new Label("Name:"); // Add Employee Page
    Label lblEmpPos = new Label("Position:");
    Label lblEmpPhone = new Label("Phone:");
    Label lblEmpAddress = new Label("Address:");
    Label lblEmpStatus = new Label("Employment Type:");
    Label lblEmpWage = new Label("Wage:");
    Label lblDaySelection = new Label("Select Day: "); // Schedule
    Label lblStartTime = new Label("Select Start Time");
    Label lblEndTime = new Label("Select End Time");
    Label lblEmpSel = new Label("Select Employee: ");
    Label lblCustName = new Label("Name: ");
    Label lblCustPhone = new Label("Phone: ");
    Label lblCustAddress = new Label("(Optional) Address: ");
    Label lblCustEmail = new Label("(Optional) Email: ");
    Label lblProdName = new Label("Product Name: ");
    Label lblProdWeight = new Label("Product Weight: ");
    Label lblProdPricePaid = new Label("Product Price: "); // Add Product Page
    Label lblProdSalePrice = new Label("Product Sale Price: ");
    Label lblProdDesc = new Label("Product Description: ");
    Label lblSupplierName = new Label("Supplier: ");
    Label lblProdImage = new Label("Image: ");
    Label lblProdQuantity = new Label("Quantity to put in inventory");
    Label lblProdCate = new Label("Product Category");
    Label lblExpCat = new Label("Category: ");//Add Expense Page
    Label lblExpAmount = new Label("Amount: ");
    Label lblExpDueDate = new Label("Due Date: ");
    Label lblExpPaid = new Label("Paid/Unpaid: ");
    Label lblSupName = new Label("Supplier Name: ");// Add Supplier
    Label lblSupAddress = new Label("Supplier Address: ");
    Label lblSupPhone = new Label("Supplier Phone Number: "); 
    Label lblSupName2 = new Label("Supplier Name: "); // Update Supplier
    Label lblSupAddress2 = new Label("Supplier Address");
    Label lblSupPhone2 = new Label("Supplier Phone Number: ");
    Label lblEmpName1 = new Label("Name:"); // Updated Employee Name
    Label lblEmpPos1 = new Label("Position:"); // Updated Employee Position 
    Label lblEmpPhone1 = new Label("Phone:"); // Updated Employee Phone     
    Label lblEmpAddress1 = new Label("Address:"); // Updated Employee Address
    Label lblEmpStatus1 = new Label("Employment Type:"); // Updated Employee Status
    Label lblEmpWage1 = new Label("Wage:"); // Updated Employee Wage
    Label lblEditEmp = new Label("Edit Employee "); // Update Employee Page
    Label lblRemoveEmp = new Label("Remove Employee: ");
    Label lblSelectEmp = new Label("Select Empoyee: ");
    Label lblExpCat2 = new Label("Category: ");//Add Updated Expense Page
    Label lblExpAmount2 = new Label("Amount: ");
    Label lblExpDueDate2 = new Label("Due Date: ");
    Label lblExpPaid2 = new Label("Paid/Unpaid: ");
    Label lblEmpUsername = new Label("Username: ");
    Label lblEmpPassword = new Label("Password: ");
    Label lblEmpUsername1 = new Label("Username: ");
    Label lblEmpPassword1 = new Label("Password: ");
    //for employee report
    Label lblEmpStartWeek = new Label("Please select starting Sunday");
    Label lblEmpEndWeek = new Label("Please select ending Saturday");

    Label lblUpdateSup = new Label("Choose Supplier to Update: ");
    // Customer Labels
    Label lblSelectCust = new Label("Select Customer: ");
    // Shopping Cart Labels
    Label lblSelectProd = new Label("Select Products: "); 
    Label lblSelectAmount = new Label("Amount Purchased: ");
    
    
    // TextFields
    TextField txtSupInfo = new TextField();
    TextField txtTotal = new TextField();
    TextField txtEmpName = new TextField("Enter first and last name"); // Add Employee Page
    TextField txtEmpPos = new TextField();
    TextField txtEmpPhone = new TextField();
    TextField txtEmpAddress = new TextField();
    TextField txtEmpWage = new TextField();
    TextField txtCustName = new TextField();
    TextField txtCustPhone = new TextField();
    TextField txtCustAddress = new TextField();
    TextField txtCustEmail = new TextField();
    TextField txtProdName = new TextField(); // Product
    TextField txtProdWeight = new TextField();
    TextField txtProdPricePaid = new TextField();
    TextField txtProdSalePrice = new TextField(); // Add Product Page
    TextField txtProdDesc = new TextField();
    TextField txtSupplierName = new TextField();
    TextField txtProdQuantity = new TextField();
    TextField txtProdCate = new TextField();
    TextField txtExpAmount = new TextField("Please enter expense amount"); //to enter expense amount    
    TextField txtExpDueDate = new TextField("Please choose due date from calendar");   
    TextField txtSupName = new TextField(); // Supplier
    TextField txtSupAddress = new TextField();
    TextField txtSupPhone = new TextField(); 
    TextField txtSupName2 = new TextField(); // Update Supplier
    TextField txtSupAddress2 = new TextField();
    TextField txtSupPhone2 = new TextField();
    TextField txtEmpUsername = new TextField();
    TextField txtEmpPassword = new TextField();

    // Add Updated Employee TextFields
    TextField txtEmpName1 = new TextField(); // Updated Employee Name
    TextField txtEmpPos1 = new TextField(); // Updated Employee Position
    TextField txtEmpPhone1 = new TextField(); // Updated Employee Phone
    TextField txtEmpAddress1 = new TextField(); // Updated Employe Address
    TextField txtEmpWage1 = new TextField(); // Updated Employee Wage
    TextField txtExpAmount2 = new TextField("Please enter expense amount"); //Updated Expense Labels    
    TextField txtExpDueDate2 = new TextField("Please choose due date from calendar");
    static TextField txtTotExp = new TextField(); // Reports
    TextField txtEmpUsername1 = new TextField();
    TextField txtEmpPassword1 = new TextField();
    // Shopping Cart TextField
    TextField txtAmount = new TextField();
    
    
    // TextAreas
    TextArea taReports = new TextArea();
    static TextArea taExpenses = new TextArea();
    TextArea taEmpReport = new TextArea();
    //POS 
    TextArea taPOS = new TextArea();
    TextArea taReceipt = new TextArea();

    // TableView
    TableView tblReports = new TableView<>();
    TableView tblExpenses = new TableView<>();
    TableView tblSuppliers = new TableView<>();
    TableView tblInventory = new TableView<>();
    TableView tblEmployee = new TableView<>();
    TableView tblPOS = new TableView<>();
    TableView tblSchedule = new TableView<>();
    TableView tblCust = new TableView<>();
            
    // Observable Lists
    ObservableList<Employee> empTableData = FXCollections.observableArrayList(Employee);
    ObservableList obsEmpStatus = FXCollections.observableArrayList("Part Time", "Full Time");
    ObservableList obsStartTime = FXCollections.observableArrayList("7:00 AM", 

            "8:00 AM", "9:00 AM", "10:00 AM", "11:00 AM", "12:00 PM", 

            "1:00 PM", "2:00 PM", "3:00 PM", "4:00 PM", "5:00 PM");

    ObservableList obsEndTime = FXCollections.observableArrayList("10:00 AM", 

            "11:00 AM", "12:00 PM", "1:00 PM", "2:00 PM", "3:00 PM", 

            "4:00 PM", "5:00 PM", "6:00 PM", "7:00 PM", "8:00 PM", "9:00 PM",

            "10:00 PM", "11:00 PM");

    ObservableList obsEmpSch = FXCollections.observableArrayList();    
    ObservableList obsEmp = FXCollections.observableArrayList();
    ObservableList<Product> prodTableData = FXCollections.observableArrayList(Product);
    ObservableList obsProduct = FXCollections.observableArrayList();
    ObservableList obsSupplier = FXCollections.observableArrayList();    
    ObservableList<Expense> expTableData = FXCollections.observableArrayList(Expense);
    ObservableList obsExpFilter = FXCollections.observableArrayList();    
    ObservableList obsExp = FXCollections.observableArrayList(Expense);    
    
    //Obs list for Employee Position - with some pre-populate position 
    ObservableList obsEmpPosit = FXCollections.observableArrayList("Manager", "Cashier", "Inventory Staff", "Custodian");    
    //Obs list for Expense Category - pre-populate 
    ObservableList obsExpenseCategory = FXCollections.observableArrayList("Mortgages", "Utilities", "Lawn Care",

                                                                          "Maintenance", "Insurance", "Cleaning", "Mechanics");

    ObservableList editExpenseList = FXCollections.observableArrayList(); 
    ObservableList obsFilters = FXCollections.observableArrayList("Category", "Amount", "Due Date", "Paid");
    ObservableList obsProdCate = FXCollections.observableArrayList("Meat/Dairy", "Canned", "Dry", "Sweet", 
            "Snacks", "Fruit/Veeggie", "Beverage", "Pharmacy");
    ObservableList<Schedule> schTableData = FXCollections.observableArrayList(Shifts);
    ObservableList obsMonth = FXCollections.observableArrayList("January", "February", "March", "April", "May", "June", "July", "August",
            "September", "October", "November", "December");
    
    ObservableList obsSupProducts = FXCollections.observableArrayList();
    ObservableList<Customer> custTableData = FXCollections.observableArrayList(Customer);
    ObservableList obsCust = FXCollections.observableArrayList();
    
    // ComboBoxes
    ComboBox cmboRType = new ComboBox(); // Reports Page
    ComboBox cmboSNum = new ComboBox();
    ComboBox cmboWeek = new ComboBox();
    ComboBox cmboMonthList = new ComboBox(obsMonth);
    ComboBox cmboExpFilter = new ComboBox(obsFilters); // Expense Button    
    ComboBox cmboExp = new ComboBox(editExpenseList);
    ComboBox cmboSupplier = new ComboBox(obsSupplier); // Supplier Button
    ComboBox cmboInvItem = new ComboBox(); // Inventory Button
    ComboBox cmboEmp = new ComboBox(obsEmp); // Employee Button
    ComboBox cmboEmpStatus = new ComboBox(obsEmpStatus); // Employee Status(Part/Full Time)
    ComboBox cmboEmpSch = new ComboBox(obsEmp);    
    ComboBox cmboStartTime = new ComboBox(obsStartTime);
    ComboBox cmboEndTime = new ComboBox(obsEndTime);  
    ComboBox cmboSupOps = new ComboBox(obsSupplier);
    
    // Product Window
    ComboBox cmboProdImage = new ComboBox(); // Product Images
    ComboBox cmboProdCate = new ComboBox(obsProdCate);
    ComboBox cmboProdList = new ComboBox(obsProduct);
    //Combo box for employee positions  
    ComboBox cmboEmpPosit = new ComboBox(obsEmpPosit);
    //Combo box for expense category
    ComboBox cmboExpenseCategory = new ComboBox(obsExpenseCategory);
    ComboBox cmboExpenseCategory2 = new ComboBox(obsExpenseCategory);
    // Updated Employee Status
    ComboBox cmboEmpStatus1 = new ComboBox(obsEmpStatus); 
    //Combobox for updating employee 
    ComboBox cmboSelectEmp = new ComboBox(obsEmp);
    ComboBox cmboCust = new ComboBox(obsCust);
    ComboBox cmboSelectCust = new ComboBox(obsCust);
    // ComboBox for Selecting Products to Purchase
    ComboBox cmboProdPurch = new ComboBox(obsProduct);

    
    
    // Alerts
    Alert addEmpEmpty = new Alert(Alert.AlertType.ERROR);
    Alert aEName = new Alert(Alert.AlertType.ERROR);
    Alert aEmpWage = new Alert(Alert.AlertType.ERROR);
    Alert aEmpPos = new Alert(Alert.AlertType.ERROR);
    Alert addProdEmpty = new Alert(Alert.AlertType.ERROR);
    //Alert for paid/unpaid radio button 
    Alert checkExpense = new Alert(Alert.AlertType.ERROR); 
    //alert for updating emp
    Alert aEditEmpEmpty = new Alert(Alert.AlertType.ERROR);
    
    // DatePicker
    DatePicker daySelection = new DatePicker();
    DatePicker dueDate = new DatePicker();
    DatePicker dueDate2 = new DatePicker();
    //for employee report
    DatePicker dpEmpShiftStart = new DatePicker(); 
    DatePicker dpEmpShiftEnd = new DatePicker(); 
    

    LocalDate ds;
    LocalDate dd;
    String tempuser;
    String temppass;
       
    // Static Variables
    private static int empSchArrayPos = 0;
    private static int empArrayPos = 0;
    private static int prodArrayPos = 0;
    private static int supArrayPos = 0;
    private static int expArrayPos = 0;
    private static int custArrayPos = 0;
    
    // CheckBox
    CheckBox chkThriftyClub = new CheckBox("Add to Thrifty Club?");

    // Log in page
    Label lblUsername = new Label("Username: ");
    Label lblPassword = new Label("Password: ");
    TextField txtUsername = new TextField();
    PasswordField txtPassword = new PasswordField();
    Button btnLogin = new Button("Login");
    Button btnLogTime = new Button("Log Time");
    Label lblLogTimeDate = new Label("Date: ");
    Label lblLogTimeStart = new Label("Start Time: ");
    Label lblLogTimeEnd = new Label("End Time: ");
    ComboBox cmboLogTimeStart = new ComboBox(obsStartTime);
    ComboBox cmboLogTimeEnd = new ComboBox(obsEndTime);
    Button btnLogTimeLog = new Button("Log Time");
    DatePicker datePickerLogTime = new DatePicker();

//START///
    public void start(Stage primaryStage) {

        // Alert information
        addEmpEmpty.setHeaderText("Empty Field!");
        addEmpEmpty.setContentText("Please fill every field.");
        aEName.setHeaderText("Invalid Employee Name!");
        aEName.setContentText("Please enter a first and last name seperated by a space.");
        aEmpWage.setHeaderText("Invalid Employee Wage!");
        aEmpWage.setContentText("Please enter a wage amount greater than 0.");
        aEmpPos.setHeaderText("Invalid Employee Status");
        aEmpPos.setContentText("Please select an employee status.");
        addProdEmpty.setHeaderText("Empty Field(s)!");
        addProdEmpty.setContentText("Please fill every field.");    
        checkExpense.setContentText("Please choose if expense is Paid or Unpaid!"); //message for paid/unpaid expense button
        Alert addSupEmpty = new Alert(Alert.AlertType.ERROR);

        //Adding each Radio Button to a ToggleGroup so that they are aware of each other.
        rdbExpPaid.setToggleGroup(btnExpGroup);
        rdbExpUnpaid.setToggleGroup(btnExpGroup);

        // Set Toggle Group for update employee
        rbUpdateEmp.setToggleGroup(tGroup);
        rbRemoveEmp.setToggleGroup(tGroup);
     
        // Pane Alignments
        primaryPane.setAlignment(Pos.CENTER);
        posPane.setAlignment(Pos.CENTER);
        managePane.setAlignment(Pos.CENTER);
        reportsPane.setAlignment(Pos.CENTER);
        reportsPane.setPadding(new Insets(10, 10, 10, 10));
        posPane.setPadding(new Insets(10, 10, 10, 10));
        updateEmployeePane.setPadding(new Insets(25, 25, 25, 25));
        
        // Pane Hgaps and Vgaps
        posPane.setVgap(10);
        posPane.setHgap(37.5);
        managePane.setVgap(25);
        reportsPane.setVgap(25);

        // Set button size and fonts
        btnEmployees.setMinSize(200, 50);
        btnExpenses.setMinSize(200, 50);
        btnInventory.setMinSize(200, 50);
        btnSupplier.setMinSize(200, 50);
        btnSchedule.setMinSize(200, 50);
        btnAddEmp.setMinSize(150, 50);
        btnAddNewEmp.setMinSize(150, 50);
        btnUpdateEmp.setMinSize(100, 50);
        btnAddExpense.setMaxSize(150, 50);
        btnUpdateEx.setMaxSize(150, 50);        
        btnAddNewExpense.setMaxSize(150, 50);
        btnSalesReports.setMinSize(200, 50); // Reports
        btnEmployeeReports.setMinSize(200, 50);
        btnMnthlyExpReports.setMinSize(200, 50);
        btnProfvsExp.setMinSize(200, 50);
        
       
        // Add POS tab nodes
//        posPane.add(tblPOS, 0, 0, 6, 1);
//        posPane.add(lblTotal, 4, 1);
//        posPane.add(txtTotal, 5, 1);
//        posPane.add(btnPrint, 3, 2);     
//        posPane.add(btnManageCust, 4, 2);
//        posPane.add(btnCreateCustAccount,5, 2);  

        //new
        posPane.add(taPOS, 0, 1, 7, 1);
        posPane.add(lblTotal, 5, 2);
        posPane.add(txtTotal, 6, 2);
        posPane.add(btnPrint, 6, 3);
        posPane.add(btnCreateCustAccount,1, 3, 3, 1); 
        posPane.add(btnManageCust, 4, 3);
        // add label
        posPane.add(lblSelectCust, 1, 0, 2, 1);
        // add combobox (customer)
        posPane.add(cmboSelectCust, 3, 0);
        // add button for add to shopping cart
        posPane.add(btnAddShopCart, 6, 0);
        txtTotal.setEditable(false);
        
        
        // Add Manage tab nodes
        managePane.add(btnEmployees, 0, 0);
        managePane.add(btnExpenses, 0, 1);
        managePane.add(btnInventory, 0, 2);
        managePane.add(btnSupplier, 0, 3);
        managePane.add(btnSchedule, 0, 4);

        // Add Reports tab nodes
        reportsPane.add(btnSalesReports, 0, 0);
        reportsPane.add(btnEmployeeReports, 0, 1);
        reportsPane.add(btnMnthlyExpReports, 0, 2);
        reportsPane.add(btnProfvsExp, 0, 3);
 
        // Create table columns for Report
        TableColumn tblcName = new TableColumn("Name");
        TableColumn tblcHours = new TableColumn("Hours");
        TableColumn tblcWages = new TableColumn("Wages Earned");
        TableColumn tblcSales = new TableColumn("Sales");       

        tblReports.getColumns().addAll(tblcName, tblcHours, tblcWages, tblcSales);

        //Expense Table
        TableColumn tblcCategory = new TableColumn("Category");
        TableColumn tblcAmount = new TableColumn("Amount");
        TableColumn tblcDue = new TableColumn("Due");
        TableColumn tblcPaid = new TableColumn("Paid");

        tblExpenses.getColumns().addAll(tblcCategory, tblcAmount, tblcDue, tblcPaid);

        //Supplier Table
        TableColumn tblcSupProduct = new TableColumn("Product");
        TableColumn tblcProdCat = new TableColumn("Category");
        TableColumn tblcPrice = new TableColumn("Price");

        tblSuppliers.getColumns().addAll(tblcSupProduct, tblcProdCat, tblcPrice);

        
        //Inventory Table
        TableColumn tblcProdName = new TableColumn("Product");
        TableColumn tblcProdCate = new TableColumn("Category");
        TableColumn tblcProdSupp = new TableColumn("Supplier");
        TableColumn tblcStock = new TableColumn("InStock"); 
        TableColumn tblcIncoming = new TableColumn("Incoming");
        TableColumn tblcDiscarded = new TableColumn("Discarded");
        
        tblInventory.getColumns().addAll(tblcProdName, tblcProdCate, tblcProdSupp, tblcStock, tblcIncoming, tblcDiscarded);
        

        //Employee Table
        TableColumn tblcEmpName = new TableColumn("Name");
        TableColumn tblcPosition = new TableColumn("Position");
        TableColumn tblcPhone = new TableColumn("Phone");
        TableColumn tblcAddress = new TableColumn("Address");
        TableColumn tblcWork = new TableColumn("Full/Part");
        TableColumn tblcWage = new TableColumn("Wage");

        tblEmployee.getColumns().addAll(tblcEmpName, tblcPosition, tblcPhone, tblcAddress, tblcWork, tblcWage);

        // POS Table
//        TableColumn tblcProdScan = new TableColumn("Product Scanned");
//        TableColumn tblcQuantity = new TableColumn("Amount");
//        TableColumn tblcProdPrice = new TableColumn("Price");
//        TableColumn tblcDiscount = new TableColumn("Discount");
//        TableColumn tblcApplied = new TableColumn("Applied");
//        TableColumn tblcTotal = new TableColumn("Total");
//
//        tblPOS.getColumns().addAll(tblcProdScan, tblcQuantity, tblcProdPrice, tblcDiscount, tblcApplied, tblcTotal);







        // Schedule Table
        TableColumn tblcSchEmp = new TableColumn("Employee: ");
        TableColumn tblcDate = new TableColumn("Date: ");
        TableColumn tblcStart = new TableColumn("Start Time: ");
        TableColumn tblcEnd = new TableColumn("End Time: ");

        tblSchedule.getColumns().addAll(tblcSchEmp, tblcDate, tblcStart, tblcEnd);
        
        // Customer Table
        TableColumn tblcCustName = new TableColumn("Customer Name");       
        TableColumn tblcCustPhone = new TableColumn("Phone");        
        TableColumn tblcCustAddress = new TableColumn("Address");        
        TableColumn tblcCustEmail = new TableColumn("Email");        
        TableColumn tblcCustMember = new TableColumn("Membership");
        
        tblCust.getColumns().addAll(tblcCustName, tblcCustPhone, tblcCustAddress, tblcCustEmail, tblcCustMember);
        
        // Setting Tab Pane
        primaryPane.add(tbPane, 0, 0);

        // Position panes inside tabs

        tab1.setContent(posPane);
        tab2.setContent(managePane);
        tab3.setContent(reportsPane);

        tbPane.getTabs().add(tab1);
        tbPane.getTabs().add(tab2);
        tbPane.getTabs().add(tab3);
        
        Scene primaryScene = new Scene(primaryPane, 750, 500);
        Scene loginScene = new Scene(loginPane, 300, 300);
        Scene logTimeScene = new Scene(logTimePane, 300, 300);
        primaryStage.setTitle("Thrifty Store");
        primaryStage.setScene(loginScene);
        primaryStage.show();

        //Log in Screen
        loginPane.setAlignment(Pos.CENTER);
        loginPane.setHgap(10);
        loginPane.setVgap(10);
        loginPane.add(lblUsername, 0, 0);
        loginPane.add(txtUsername, 1, 0);
        loginPane.add(lblPassword, 0, 1);
        loginPane.add(txtPassword, 1, 1);
        loginPane.add(btnLogin, 0, 2);
        loginPane.add(btnLogTime, 0, 3);
        
        //Log Time Pane
        logTimePane.setAlignment(Pos.CENTER);
        logTimePane.setHgap(10);
        logTimePane.setVgap(10);
        logTimePane.add(lblLogTimeStart, 0, 0);
        logTimePane.add(cmboLogTimeStart, 1, 0);
        logTimePane.add(lblLogTimeEnd, 0, 1);
        logTimePane.add(cmboLogTimeEnd, 1, 1);
        logTimePane.add(lblLogTimeDate, 0, 2);
        logTimePane.add(datePickerLogTime, 1, 2);
        logTimePane.add(btnLogTimeLog, 1, 3);
        

        btnLogTime.setOnAction(e -> {
            tempuser = txtUsername.getText();
            temppass = txtPassword.getText();
            txtUsername.clear();
            txtPassword.clear();
            primaryStage.setScene(logTimeScene);
            
        });
        
        
        btnLogTimeLog.setOnAction(e -> {

            if(cmboLogTimeStart.getSelectionModel().getSelectedIndex() >= 0 &&
                    cmboLogTimeEnd.getSelectionModel().getSelectedIndex() >= 0 &&
                    datePickerLogTime != null)
            {
                for (int i=0; i<Employee.size();i++)
                {
                    if(tempuser.equals(Employee.get(i).getEmpUser()) && temppass.equals(Employee.get(i).getEmpPass()))
                    {
                        Employee shiftEmp = Employee.get(i);
                        String shiftDate = String.valueOf(datePickerLogTime.getValue());
                        String shiftBeg = String.valueOf(cmboLogTimeStart.getSelectionModel().getSelectedItem());
                        String shiftEnd = String.valueOf(cmboLogTimeEnd.getSelectionModel().getSelectedItem());
                        
                        Schedule newShift = new Schedule(shiftEmp, shiftDate, shiftBeg, shiftEnd);
                        Shifts.add(newShift);
                        schTableData.add(newShift);
                    }
                    
                }
            }
            cmboLogTimeStart.getSelectionModel().clearSelection();
            cmboLogTimeEnd.getSelectionModel().clearSelection();
            
            primaryStage.setScene(loginScene);
            
        });
        
        btnLogin.setOnAction(e -> {
            String tempUsername = txtUsername.getText();
            String tempPassword = txtPassword.getText();
            for(int i = 0; i<Employee.size();i++)
            {
                if(tempUsername.equals(Employee.get(i).getEmpUser()) && tempPassword.equals(Employee.get(i).getEmpPass()))
                {
                     String tempPosition = Employee.get(i).getEmployeePos();
                     if(tempPosition.equals("Manager"))
                     {
                         primaryStage.setScene(primaryScene);
                     }
                     else
                     {
                         primaryStage.setScene(primaryScene);
                         btnEmployees.setVisible(false);
                         btnEmployees.setManaged(false);
                         btnExpenses.setVisible(false);
                         btnExpenses.setManaged(false);
                     }
                }
            }
            
                        

        });


        tbPane.setMinHeight(primaryScene.getHeight());
        tbPane.setMinWidth(primaryScene.getWidth());
        ///txtTotal.setMaxWidth(tblcTotal.getWidth());
        daySelection.setPrefWidth(375);


        // Lambdas for Manage Page buttons

        btnEmployees.setOnAction(e -> {

        employeePane = new GridPane();
        employeePane.setAlignment(Pos.CENTER);
        employeePane.add(lblEmployee, 0, 0);
        employeePane.add(cmboEmp, 0, 2);
        employeePane.add(btnUpdateEmp, 1, 2);
        employeePane.add(btnAddNewEmp, 2, 2);
        employeePane.add(tblEmployee, 0, 1, 3, 1);


        Scene empScene = new Scene(employeePane, 600, 650);
        Stage empStage = new Stage();
        empStage.setScene(empScene);
        empStage.setTitle("Thrifty Store Employees");
        empStage.show();

        employeePane.setHgap(15);
        employeePane.setVgap(15);
        

        });

        

        // Add Employee Button

        btnAddNewEmp.setOnAction(e -> {



        addEmployeePane = new GridPane();    

        addEmployeePane.setAlignment(Pos.CENTER);

        addEmployeePane.setVgap(10);

        addEmployeePane.setHgap(5);

        // Labels for create new employee window

        addEmployeePane.add(lblEmpName, 0, 0); 

        addEmployeePane.add(lblEmpPos, 0, 1);

        addEmployeePane.add(lblEmpPhone, 0, 2);

        addEmployeePane.add(lblEmpAddress, 0, 3);

        addEmployeePane.add(lblEmpStatus, 0, 4);

        addEmployeePane.add(lblEmpWage, 0, 5);

        // TextFields for employee input

        addEmployeePane.add(txtEmpName, 1, 0); 

        addEmployeePane.add(cmboEmpPosit, 1, 1); 

       // addEmployeePane.add(txtEmpPos, 1, 1);

        addEmployeePane.add(txtEmpPhone, 1, 2);

        addEmployeePane.add(txtEmpAddress, 1, 3);

        addEmployeePane.add(cmboEmpStatus, 1, 4);

        addEmployeePane.add(txtEmpWage, 1, 5);
        
        addEmployeePane.add(lblEmpUsername, 0, 6);
        
        addEmployeePane.add(txtEmpUsername, 1, 6);
        
        addEmployeePane.add(lblEmpPassword, 0, 7);
        
        addEmployeePane.add(txtEmpPassword, 1, 7);

        addEmployeePane.add(btnAddEmp, 1, 9);

        Scene addEmpScene = new Scene(addEmployeePane, 500, 500);

        Stage addEmpStage = new Stage();

        addEmpStage.setScene(addEmpScene);

        addEmpStage.setTitle("Add Employee");

        addEmpStage.show();

        //clear the employee name input on click     

        txtEmpName.setOnMouseClicked(i ->{

        txtEmpName.clear();

        });

    });



    //when click button Add Employee

    btnAddEmp.setOnAction(e -> {

        // Check for empty fields

        boolean eName = txtEmpName.getText().trim().isEmpty();

        //boolean ePos = txtEmpPos.getText().trim().isEmpty();

        boolean ePos = cmboEmpPosit.getItems().isEmpty();

        boolean ePhone = txtEmpPhone.getText().trim().isEmpty();

        boolean eAddress = txtEmpAddress.getText().trim().isEmpty();
        boolean eWage = txtEmpWage.getText().trim().isEmpty();
        boolean eUsername = txtEmpUsername.getText().trim().isEmpty();
        boolean ePassword = txtEmpPassword.getText().trim().isEmpty();

        if (eName || ePos || ePhone || eAddress || eWage || eUsername || ePassword)
        {
            addEmpEmpty.showAndWait();
        } 
        else 
        {
            String empName = txtEmpName.getText();
            if (empName.contains(" ") == false)
            { // If there is NO space in name
                aEName.showAndWait();
            }
            else 
            {   
                empName = txtEmpName.getText();
                int empStatus = cmboEmpStatus.getSelectionModel().getSelectedIndex();
                String empPos = (String)cmboEmpPosit.getSelectionModel().getSelectedItem();

                //String empPos = txtEmpPos.getText();

                String empPhone = txtEmpPhone.getText();

                String empAddress = txtEmpAddress.getText();

                String empWage = txtEmpWage.getText();

                double empWage1 = Double.parseDouble(empWage);
                
                String empUser = txtEmpUsername.getText();
                
                String empPass = txtEmpPassword.getText();

                if (empWage1 <= 0) 

                { 

                    aEmpWage.showAndWait();



                } 

                else 

                {

                    if (empStatus < 0) {



                        aEmpPos.showAndWait();



                    } 

                    else {



                    Employee employee = new Employee(empName, empPos,  empPhone, empAddress, empStatus, empWage1, empUser, empPass);

                    Employee.add(employee);

                    empTableData.add(employee);    

                                                    



                        obsEmp.add(Employee.get(empArrayPos).getEmployeeName());

                        empArrayPos++;

                        obsEmpSch.add(Employee.get(empSchArrayPos).getEmployeeName());

                        empSchArrayPos++;

                        txtEmpName.clear();

                        txtEmpPos.clear();

                        cmboEmpPosit.getSelectionModel().clearSelection();

                        txtEmpPhone.clear();

                        txtEmpAddress.clear();

                        cmboEmpStatus.getSelectionModel().clearSelection();

                        txtEmpWage.clear();
                        
                        txtEmpUsername.clear();
                        
                        txtEmpPassword.clear();

                    }

                } 

            }

        }

    });

    tblEmployee.setItems(empTableData);

    //add value to each column 

    tblcEmpName.setCellValueFactory(new PropertyValueFactory<Employee,String>("EmployeeName"));
    tblcPosition.setCellValueFactory(new PropertyValueFactory<Employee,Employee>("EmployeePos")); 
    tblcPhone.setCellValueFactory(new PropertyValueFactory<Employee,String>("EmployeePhone")); 
    tblcAddress.setCellValueFactory(new PropertyValueFactory<Employee,String>("EmployeeAddress"));
    tblcWork.setCellValueFactory(new PropertyValueFactory<Employee,String>("EmpStatus"));
    tblcWage.setCellValueFactory(new PropertyValueFactory<Employee,Double>("EmployeeWage")); 

    
//UPDATE EMPLOYEE//
    btnUpdateEmp.setOnAction(e -> {

            updateEmployeePane.setAlignment(Pos.TOP_LEFT);

            updateEmployeePane.setHgap(20);

            updateEmployeePane.setVgap(10);

            updateEmployeePane.add(lblEditEmp, 0, 0);
            updateEmployeePane.add(rbUpdateEmp, 0, 3);
            updateEmployeePane.add(lblSelectEmp, 0, 2);
            updateEmployeePane.add(rbRemoveEmp,1, 3);
            updateEmployeePane.add(cmboSelectEmp, 1, 2);
            updateEmployeePane.add(lblEmpName1, 0, 5);
            updateEmployeePane.add(lblEmpPos1, 0, 6);
            updateEmployeePane.add(lblEmpPhone1, 0, 7);
            updateEmployeePane.add(lblEmpAddress1, 0, 8);
            updateEmployeePane.add(lblEmpStatus1, 0, 9);
            updateEmployeePane.add(lblEmpWage1, 0, 10);
            updateEmployeePane.add(txtEmpName1, 1, 5);
            //updateEmployeePane.add(txtEmpPos1, 1, 6);
            updateEmployeePane.add(cmboEmpPosit, 1, 6);
            updateEmployeePane.add(txtEmpPhone1, 1, 7);
            updateEmployeePane.add(txtEmpAddress1, 1, 8);
            updateEmployeePane.add(cmboEmpStatus1, 1, 9);
            updateEmployeePane.add(txtEmpWage1, 1, 10);
            updateEmployeePane.add(lblEmpUsername1, 0, 11);
            updateEmployeePane.add(txtEmpUsername1, 1, 11);
            updateEmployeePane.add(lblEmpPassword1, 0, 12);
            updateEmployeePane.add(txtEmpPassword1, 1, 12);
            updateEmployeePane.add(btnSaveChanges, 1, 14);

            lblEmpName1.setVisible(false);
            lblEmpPos1.setVisible(false);
            lblEmpPhone1.setVisible(false);
            lblEmpAddress1.setVisible(false);
            lblEmpStatus1.setVisible(false);
            lblEmpWage1.setVisible(false);
            txtEmpName1.setVisible(false);
            txtEmpPos1.setVisible(false);
            cmboEmpPosit.setVisible(false);
            txtEmpPhone1.setVisible(false);
            txtEmpAddress1.setVisible(false);
            cmboEmpStatus1.setVisible(false);
            txtEmpWage1.setVisible(false);
            lblEmpUsername1.setVisible(false);
            txtEmpUsername1.setVisible(false);
            lblEmpPassword1.setVisible(false);
            txtEmpPassword1.setVisible(false);

            Scene updateEmpScene = new Scene(updateEmployeePane, 500, 600);
            Stage updateEmpStage = new Stage();
            updateEmpStage.setScene(updateEmpScene);
            updateEmpStage.setTitle("Update Employee");
            updateEmpStage.show();
        });
        

        rbUpdateEmp.setOnAction(e -> {

            if (rbUpdateEmp.isSelected()) {
                lblEmpName1.setVisible(true);
                lblEmpPos1.setVisible(true);
                lblEmpPhone1.setVisible(true);
                lblEmpAddress1.setVisible(true);
                lblEmpStatus1.setVisible(true);
                lblEmpWage1.setVisible(true);
                txtEmpName1.setVisible(true);
                txtEmpPos1.setVisible(true);
                cmboEmpPosit.setVisible(true);
                txtEmpPhone1.setVisible(true);
                txtEmpAddress1.setVisible(true);
                cmboEmpStatus1.setVisible(true);
                txtEmpWage1.setVisible(true);
                lblEmpUsername1.setVisible(true);
                txtEmpUsername1.setVisible(true);
                lblEmpPassword1.setVisible(true);
                txtEmpPassword1.setVisible(true);
            }

        });

        rbRemoveEmp.setOnAction(e -> {

            if (rbRemoveEmp.isSelected()) {

                lblEmpName1.setVisible(false);
                lblEmpPos1.setVisible(false);
                lblEmpPhone1.setVisible(false);
                lblEmpAddress1.setVisible(false);
                lblEmpStatus1.setVisible(false);
                lblEmpWage1.setVisible(false);
                txtEmpName1.setVisible(false);
                txtEmpPos1.setVisible(false);
                cmboEmpPosit.setVisible(false);
                txtEmpPhone1.setVisible(false);
                txtEmpAddress1.setVisible(false);
                cmboEmpStatus1.setVisible(false);
                txtEmpWage1.setVisible(false);
                lblEmpUsername1.setVisible(false);
                txtEmpUsername1.setVisible(false);
                lblEmpPassword1.setVisible(false);
                txtEmpPassword1.setVisible(false);
            }

        });

        btnSaveChanges.setOnAction(e -> {

            int employeeIndex = cmboSelectEmp.getSelectionModel().getSelectedIndex();
            Employee selectedEmployee = Employee.get(employeeIndex);
            String empID = String.valueOf(selectedEmployee.getEmployeeID());
            int empIDNum = selectedEmployee.getEmployeeID();
            boolean employeeSelection = cmboSelectEmp.getSelectionModel().isEmpty();

            if (employeeSelection) 
                {
                    aEditEmpEmpty.showAndWait();
                }
            else 
            {
                RadioButton selectedRB = (RadioButton)tGroup.getSelectedToggle();
                String tgValue = selectedRB.getText();

                if(rbRemoveEmp.isSelected()) {
                    //selectedEmployee.removeEmployee(selectedEmployee);
                    empTableData.remove(selectedEmployee);
                    Employee.remove(selectedEmployee);
                    DeleteEmployeeDB(selectedEmployee);
                    
                }                

                if(rbUpdateEmp.isSelected()) {

                    boolean newName = txtEmpName1.getText().trim().isEmpty();
                    //boolean newPos = txtEmpPos1.getText().trim().isEmpty();
                    boolean newPos = cmboEmpPosit.getItems().isEmpty();
                    boolean newPhone = txtEmpPhone1.getText().trim().isEmpty();
                    boolean newAddress = txtEmpAddress1.getText().trim().isEmpty();
                    boolean newWage = txtEmpWage1.getText().trim().isEmpty();
                    int newStatus = cmboEmpStatus1.getSelectionModel().getSelectedIndex();
                    boolean newUser = txtEmpUsername1.getText().trim().isEmpty();
                    boolean newPass = txtEmpPassword1.getText().trim().isEmpty();
                    

                    if(!newName) {
                        selectedEmployee.setEmployeeName(txtEmpName1.getText());
                        txtEmpName1.clear();
                    }
                    if (!newPos) {
                    //selectedEmployee.setEmpPos(txtEmpPos1.getText());
                    //txtEmpPos1.clear();
                    //added
                        selectedEmployee.setEmpPos((String)cmboEmpPosit.getSelectionModel().getSelectedItem());  
                        cmboEmpPosit.getSelectionModel().clearSelection();
                    }
                    if(!newPhone) {
                        selectedEmployee.setEmpPhone(txtEmpPhone1.getText());
                        txtEmpPhone1.clear();
                    }
                    if(!newAddress) {
                        selectedEmployee.setEmpAddress(txtEmpAddress1.getText());
                        txtEmpAddress1.clear();
                    }
                    if (newStatus >= 0) {
                        selectedEmployee.updateEmpStatus(newStatus);
                        cmboEmpStatus1.getSelectionModel().clearSelection();
                    }
                    if(!newWage) {
                        double newWage1 = Double.parseDouble(txtEmpWage1.getText());
                        selectedEmployee.setEmpWage(newWage1);
                        txtEmpWage1.clear();
                    }
                    if(!newUser)
                    {
                        selectedEmployee.setEmpUser(txtEmpUsername1.getText());
                        txtEmpUsername1.clear();
                    }
                    if(!newPass)
                    {
                        selectedEmployee.setEmpPass(txtEmpPassword1.getText());
                        txtEmpPassword.clear();
                    }

                }

            }

        tblEmployee.refresh();
        });

    
// Expenses Button
    btnExpenses.setOnAction(e -> {

        expensePane = new GridPane();
        expensePane.setHgap(10);
        expensePane.setVgap(10);
        expensePane.setAlignment(Pos.CENTER);

        expensePane.add(lblExpense, 0, 0);
        //expensePane.add(lblExpFilter, 0, 1, 2, 1);
        //expensePane.add(cmboExpFilter, 1, 1);
        //expensePane.add(btnFilter, 2, 1);
        expensePane.add(cmboExp, 0, 3);
        expensePane.add(btnEditEx, 1, 3);
        expensePane.add(btnAddExpense, 2, 3);
        expensePane.add(tblExpenses, 0, 2, 3, 1);

        Scene expenseScene = new Scene(expensePane, 600, 550);
        Stage expenseStage = new Stage();
        expenseStage.setScene(expenseScene);
        expenseStage.setTitle("Thrifty Store Current Expenses");
        expenseStage.show(); 

    });

    //When click button Add Expense

    btnAddExpense.setOnAction(e -> {

        //Expense label
        addExpensePane = new GridPane();

        addExpensePane.setHgap(10);
        addExpensePane.setVgap(10);
        addExpensePane.setAlignment(Pos.CENTER);
        
        addExpensePane.add(lblExpCat, 0, 0);
        addExpensePane.add(lblExpAmount, 0, 1);
        addExpensePane.add(lblExpDueDate, 0, 2);
        addExpensePane.add(rdbExpPaid, 0, 3);
        addExpensePane.add(rdbExpUnpaid, 1, 3);

        //Expense text
        addExpensePane.add(cmboExpenseCategory, 1,0);
        addExpensePane.add(txtExpAmount, 1, 1);
        addExpensePane.add(dueDate, 1, 2);
        addExpensePane.add(btnAddNewExpense, 1, 4);

        //clear the amount input when click the text box
        txtExpAmount.setOnMousePressed(m ->{
        txtExpAmount.clear();

        });

        Scene addExpenseScene = new Scene(addExpensePane, 500, 500);
        Stage addExpenseStage = new Stage();
        addExpenseStage.setScene(addExpenseScene);
        addExpenseStage.setTitle("Add Expenses");
        addExpenseStage.show();  
   });

    //when click button Add New Expense
    btnAddNewExpense.setOnAction(e -> {

        String expPaid = "";
        dueDate.setOnAction(b -> {
            dd = daySelection.getValue();
        });

        //Radio Button check for Paid/unpaid expense
        if(rdbExpPaid.isSelected())
            {
                expPaid = "Paid";
            }
        else if (rdbExpUnpaid.isSelected())
            {
                expPaid = "Unpaid";
            }
        //if none button is checked, show error 
        else
            {
                checkExpense.showAndWait();
            }
        {
            String expCategory = (String)cmboExpenseCategory.getSelectionModel().getSelectedItem();
            Double expAmount = Double.valueOf(txtExpAmount.getText());
            String expDueDate = String.valueOf(dueDate.getValue());

            //String expPaid = "";
            Expense newExpense = new Expense(expCategory, expAmount, expDueDate, expPaid);
              
            Expense.add(newExpense);
            expTableData.add(newExpense);
            editExpenseList.add(newExpense.toString());

           // obsExp.add(Expense.get(expArrayPos).toString());
            expArrayPos++;
            
            
        }

        cmboExpenseCategory.getSelectionModel().clearSelection();

        txtExpAmount.clear();
        dueDate.getEditor().clear();
        rdbExpPaid.setSelected(false);
        rdbExpUnpaid.setSelected(false);

        tblExpenses.refresh();
        tblExpenses.setItems(expTableData);

    }); //end of clicking add expense button 

    // When Update Expense is selected 
    btnEditEx.setOnAction(e -> {
        

    if(cmboExp.getSelectionModel().getSelectedIndex() >= 0)
    {    
       //Expense label
        editExpensePane = new GridPane();

        editExpensePane.setHgap(10);
        editExpensePane.setVgap(10);
        editExpensePane.setAlignment(Pos.CENTER);

        editExpensePane.add(lblExpCat2, 0, 0);
        editExpensePane.add(lblExpAmount2, 0, 1);
        editExpensePane.add(lblExpDueDate2, 0, 2);
        editExpensePane.add(rdbExpPaid2, 0, 3);
        editExpensePane.add(rdbExpUnpaid2, 1, 3);
        //Expense text
        editExpensePane.add(cmboExpenseCategory2, 1,0);
        editExpensePane.add(txtExpAmount2, 1, 1);
        editExpensePane.add(dueDate2, 1, 2);
        editExpensePane.add(btnUpdateEx, 1, 4);

        //clear the amount input when click the text box

        txtExpAmount2.setOnMousePressed(m ->{
        txtExpAmount2.clear();
        });

        Scene editExpenseScene = new Scene(editExpensePane, 500, 500);
        Stage editExpenseStage = new Stage();
        editExpenseStage.setScene(editExpenseScene);
        editExpenseStage.setTitle("Update Expense");
        editExpenseStage.show();
    }
    else 
    {
        Alert expenseSelectEmpty = new Alert(Alert.AlertType.ERROR);
        expenseSelectEmpty.setContentText("Please select an Expense.");
        expenseSelectEmpty.showAndWait();

    } 

    });

    btnUpdateEx.setOnAction(e -> {

        int i = cmboExp.getSelectionModel().getSelectedIndex();

        Expense selectedExpense = Expense.get(i);

        String expCategory = (String)cmboExpenseCategory2.getSelectionModel().getSelectedItem();

        selectedExpense.setCategory(expCategory);

        Double expAmount = Double.valueOf(txtExpAmount2.getText());
        selectedExpense.setAmount(expAmount);


        dueDate2.setOnAction(b -> {

            dd = daySelection.getValue();

        });

        String expDueDate = String.valueOf(dueDate2.getValue());

        selectedExpense.setDueDate(expDueDate);

        String expPaid = "";

        //Radio Button check for Paid/unpaid expense

        if(rdbExpPaid2.isSelected())
            {
                expPaid = "Paid";
            }
        else if (rdbExpUnpaid2.isSelected())
            {
                expPaid = "Unpaid";
            }
        //if none button is checked, show error 

        else
            {
                checkExpense.showAndWait();
            }
        selectedExpense.setPaid(expPaid);

        editExpenseList.clear();

        for(Expense exp: Expense)
            {
                editExpenseList.add(exp.toString());
            }

        cmboExp.getSelectionModel().clearSelection();
        cmboExpenseCategory2.getSelectionModel().clearSelection();
        txtExpAmount2.clear();

        dueDate2.getEditor().clear();

        rdbExpPaid2.setSelected(false);
        rdbExpUnpaid2.setSelected(false);
        

        tblExpenses.refresh();


    }); //end of clicking update expense button 


//    btnFilter.setOnAction(e -> {
//    
//    int filterSelect = cmboExpFilter.getSelectionModel().getSelectedIndex();
//    
//    switch(filterSelect)
//    {
//        case 0: 
//            tblExpenses.getSortOrder().add(tblcCategory);
//            break;
//        case 1: 
//            tblExpenses.getSortOrder().add(tblcAmount);
//            break;
//    }
//     
//    });

    tblcCategory.setCellValueFactory(new PropertyValueFactory<Expense,String>("category"));
    tblcAmount.setCellValueFactory(new PropertyValueFactory<Expense,Double>("amount"));
    tblcDue.setCellValueFactory(new PropertyValueFactory<Expense,String>("dueDate"));
    tblcPaid.setCellValueFactory(new PropertyValueFactory<Expense,String>("paid"));

/////STARTTTT NEWWWW

//// INVENTORY WINDOW 

    btnInventory.setOnAction(e -> {
    inventoryPane = new GridPane();
    inventoryPane.setHgap(20);
    inventoryPane.setVgap(20);
    inventoryPane.setAlignment(Pos.CENTER);
    
    
    
    ObservableList olImageSelect = FXCollections.observableArrayList();
  
    ComboBox cmboImageSelect = new ComboBox(olImageSelect);
    
   // Image testImage = new Image("dog1.png", 100, 150, false, false);
    
    
//    ImageView imageProdPic = new ImageView(testImage);
    
    inventoryPane.add(lblInventory, 0, 0);
    inventoryPane.add(cmboInvItem, 0, 2);
    inventoryPane.add(btnChangeImage, 1, 2);
    inventoryPane.add(btnAddNewProd, 2, 2);
    inventoryPane.add(btnUpdateProd, 2, 3);
    
 
    
    inventoryPane.add(tblInventory, 0, 1, 3, 1);
    
    
    Scene invScene = new Scene(inventoryPane, 600, 650);
    Stage invStage = new Stage();
    invStage.setScene(invScene);
    invStage.setTitle("Thrifty Store Inventory");
    invStage.show();
    });

    btnAddNewProd.setOnAction(f -> {
        addProductPane = new GridPane();
        addProductPane.setAlignment(Pos.CENTER);
        addProductPane.setVgap(10);
        addProductPane.setHgap(5);
        
        //add labels for products 
        addProductPane.add(lblProdName, 0, 0);
        addProductPane.add(lblProdWeight, 0, 1);
        
        addProductPane.add(lblProdCate, 0, 2);
        
        addProductPane.add(lblProdPricePaid, 0, 3);
        addProductPane.add(lblProdSalePrice, 0, 4);
        addProductPane.add(lblProdDesc, 0, 5);
        addProductPane.add(lblSupplierName, 0, 6);
        addProductPane.add(lblProdQuantity, 0, 7); //new
        
        
        addProductPane.add(txtProdName, 1, 0);
        addProductPane.add(txtProdWeight, 1, 1);    
        addProductPane.add(cmboProdCate, 1, 2); //new cmbo Product category
        addProductPane.add(txtProdPricePaid, 1, 3);
        addProductPane.add(txtProdSalePrice, 1, 4); 
        addProductPane.add(txtProdDesc, 1, 5);
 
        addProductPane.add(cmboSupplier, 1, 6); //combo box for supplier to choose from
        addProductPane.add(txtProdQuantity, 1,7); //new
        
        //addProductPane.add(cmboProdImage, 1, 8);
        
        
        //addProductPane.add(btnAddImage, 1, 8); //to open image window to choose image from
        addProductPane.add(lblProdImage, 0, 8);
        
        addProductPane.add(btnAddProd, 2, 8);
        
        Scene addProdScene = new Scene(addProductPane, 600, 600);
        Stage addProdStage = new Stage();
        addProdStage.setScene(addProdScene);
        addProdStage.setTitle("Add Product");
        addProdStage.show();
    });

   btnAddProd.setOnAction(g -> {
       
       
        boolean eProdName = txtProdName.getText().trim().isEmpty();
        boolean eProdWeight = txtProdWeight.getText().trim().isEmpty();
        boolean eProdCate = cmboProdCate.getSelectionModel().isEmpty();
        
        boolean eProdPricePaid = txtProdPricePaid.getText().trim().isEmpty();
        boolean eProdSalePrice = txtProdSalePrice.getText().trim().isEmpty();
        boolean eProdDesc = txtProdDesc.getText().trim().isEmpty();
        boolean eProdQuantity = txtProdQuantity.getText().trim().isEmpty();

        boolean eSupplierName = cmboSupplier.getSelectionModel().isEmpty();
        
        //if(eProdName || eProdWeight || eProdPricePaid || eProdSalePrice || eProdDesc || eSupplierName || eProdQuantity)
        
        if(eProdName || eProdCate || eProdWeight || eProdPricePaid || eProdSalePrice || eProdDesc || eSupplierName  || eProdQuantity)    
        {
            addProdEmpty.showAndWait();
        }
        else
        {
            String prodName = txtProdName.getText();
            String prodCate = (String)cmboProdCate.getSelectionModel().getSelectedItem(); //select category from list
            double prodWeight = Double.valueOf(txtProdWeight.getText());
            double prodPrice = Double.valueOf(txtProdPricePaid.getText());
            double prodSPrice = Double.valueOf(txtProdSalePrice.getText());
            String prodDesc = txtProdDesc.getText();
            int prodQuantity = Integer.valueOf(txtProdQuantity.getText());
  
            int prodInt = cmboSupplier.getSelectionModel().getSelectedIndex(); //select supplier from list
            Supplier prodSupp = Supplier.get(prodInt);
            
            String prodSuppName = prodSupp.getSupplierName();
            
            System.out.println(prodSuppName);//test out what it will print
            
            //add new product 
            Product newProduct = new Product(prodName, prodCate, prodWeight, prodDesc, prodPrice, prodSPrice, prodSupp, prodQuantity);
            
            Product.add(newProduct);
            
            prodTableData.add(newProduct);

            obsProduct.add(Product.get(prodArrayPos).getProductName());  
            prodArrayPos++;
            
            System.out.println(newProduct.toString());
            
            txtProdName.clear();
            txtProdCate.clear();
            
            txtProdWeight.clear();
            txtProdPricePaid.clear();
            txtProdSalePrice.clear();
            txtProdDesc.clear();
            txtSupplierName.clear();
            txtProdQuantity.clear();

        }
        
        //when click button add image to choose image
       // btnAddImage.setOnAction(m ->{
            
            
        });
        

   tblInventory.setItems(prodTableData);
   
    //add value to each column 
    //tblcImage.setCellValueFactory(new PropertyValueFactory<Employee,String>("EmployeeName"));
    tblcProdName.setCellValueFactory(new PropertyValueFactory<Product,String>("ProductName"));
    tblcProdCate.setCellValueFactory(new PropertyValueFactory<Product,String>("ProductCategory"));
    tblcProdSupp.setCellValueFactory(new PropertyValueFactory<Product,Supplier>("supplierName"));
    
    tblcStock.setCellValueFactory(new PropertyValueFactory<Product,Integer>("ProductQuantity")); 
    
    
    
  //UPDATE PRODUCT
    btnUpdateProd.setOnAction (m ->{
      
        
        //create new update product pane
        updateProdPane = new GridPane();
        updateProdPane.setAlignment(Pos.CENTER);
        updateProdPane.setHgap(20);
        updateProdPane.setVgap(10);
            
        Label welcome = new Label("Please select an item from the dropdown"
                + " menu below to edit!");

        Label instructions = new Label("Check all of the boxes of the fields you"
                + " would like to edit");
       
        CheckBox updateProdName = new CheckBox("Product Name");
        
        
        CheckBox updateProdWeight = new CheckBox("Item weight");
        CheckBox updateProdCate = new CheckBox("Product Category");
        
        CheckBox updateProdPricePaid = new CheckBox("Price Paid for Product");
        
        CheckBox updateProdSalePrice = new CheckBox("Sale price");
        
        CheckBox updateProdDesc = new CheckBox("Item Description");
        CheckBox updateProdQuan = new CheckBox("Number of items to add to inventory");
        
        Button btnEditProd = new Button("Submit Changes");
        
        updateProdPane.add(welcome, 0,0);
      
        updateProdPane.add(cmboProdList, 0,1 );
        
        updateProdPane.add(instructions,0,2);
        
        updateProdPane.add(updateProdName,0,3);
        
        updateProdPane.add(updateProdCate,0, 4);
        
        updateProdPane.add(updateProdWeight,0,5);
        
        updateProdPane.add(updateProdPricePaid,0,6);
        
        updateProdPane.add(updateProdSalePrice, 0, 7);
        
        updateProdPane.add(updateProdDesc, 0, 8);
        
 
        updateProdPane.add(updateProdQuan, 0, 9);
             
        updateProdPane.add(btnEditProd, 0, 19);
        
        
        Scene updateProdScene = new Scene(updateProdPane, 1000, 700);
        
        Stage updateProdStage = new Stage();
        
        updateProdStage.setScene(updateProdScene);
        updateProdStage.setTitle("Update Product Window");
        updateProdStage.show();
        
        //select the product to update from the product list
        
        
        btnEditProd.setOnAction(i->{
            
            //refresh the change and close the editing window
            tblInventory.refresh();
            updateProdStage.close();
        });
        
        
        
//when select each button  

    //update product name
    
        updateProdName.setOnAction(e ->{
            
           Label newProdName = new Label("Enter New Product Name");
           TextField txtNewProdName = new TextField();
           Button btnNewProdName = new Button("Update Name");
           
           updateProdPane.add(newProdName,0,10);
           updateProdPane.add(txtNewProdName,1,10);
           updateProdPane.add(btnNewProdName,2,10);

           btnNewProdName.setOnAction(j ->{
               int prodIndex = cmboProdList.getSelectionModel().getSelectedIndex();
               Product selectedProd = Product.get(prodIndex);
               String pName= txtNewProdName.getText();   
               selectedProd.setProductName(pName);
           });
        });
        
     
    //update product weight
    updateProdWeight.setOnAction(e ->{
            
           Label newProdWeight = new Label("Enter New Product Weight (in lbs)");
           TextField txtNewProdWeight = new TextField();
           Button btnNewProdWeight = new Button("Update Weight");
           
           updateProdPane.add(newProdWeight,0,12);
           updateProdPane.add(txtNewProdWeight,1,12);
           updateProdPane.add(btnNewProdWeight,2,12);

           btnNewProdWeight.setOnAction(j ->{
               int prodIndex = cmboProdList.getSelectionModel().getSelectedIndex();
               Product selectedProd = Product.get(prodIndex);
               String pWeight= txtNewProdWeight.getText(); 
               selectedProd.setProductName(pWeight);

           });
        });
        
    //update product category
    updateProdCate.setOnAction(e ->{
            
           Label newProdCate = new Label("Choose new category");
           //ComboBox cmboNewProdCate = new TextField();
           Button btnNewProdCate = new Button("Update Category");
           
           updateProdPane.add(newProdCate,0,11);
           updateProdPane.add(cmboProdCate, 1,11);
           updateProdPane.add(btnNewProdCate,2,11);

           btnNewProdCate.setOnAction(j ->{
               int prodIndex = cmboProdList.getSelectionModel().getSelectedIndex();
               Product selectedProd = Product.get(prodIndex);
               String pNewCate = (String)cmboProdCate.getSelectionModel().getSelectedItem();
               selectedProd.setProductCategory(pNewCate);

           });
        });    
        
  //update product paid price
    updateProdPricePaid.setOnAction(e ->{
            
           Label newProdPP = new Label("Enter New Product Paid Price");
           TextField txtNewProdPP = new TextField();
           Button btnNewProdPP = new Button("Update Price Paid");
           
           updateProdPane.add(newProdPP,0,13);
           updateProdPane.add(txtNewProdPP,1,13);
           updateProdPane.add(btnNewProdPP,2,13);

           btnNewProdPP.setOnAction(j ->{
               int prodIndex = cmboProdList.getSelectionModel().getSelectedIndex();
               Product selectedProd = Product.get(prodIndex);
               double pPaidPrice = Double.parseDouble(txtNewProdPP.getText());   
               selectedProd.setPricePaid(pPaidPrice);
           });
        });
        
    //update product sale price
    updateProdSalePrice.setOnAction(e ->{
            
           Label newProdSP = new Label("Enter New Product Sale Price");
           TextField txtNewProdSP = new TextField();
           Button btnNewProdSP = new Button("Update Sale Price");
           
           updateProdPane.add(newProdSP,0,14);
           updateProdPane.add(txtNewProdSP,1,14);
           updateProdPane.add(btnNewProdSP,2,14);

           btnNewProdSP.setOnAction(j ->{
               int prodIndex = cmboProdList.getSelectionModel().getSelectedIndex();
               Product selectedProd = Product.get(prodIndex);
               double pSalePrice = Double.parseDouble(txtNewProdSP.getText());   
               selectedProd.setPricePaid(pSalePrice);
           });
        });    
    
    
    //update product sale price
    updateProdDesc.setOnAction(e ->{
            
           Label newProdDesc = new Label("Enter New Product Description");
           TextField txtNewProdDesc = new TextField();
           Button btnNewProdDesc = new Button("Update Product Description");
           
           updateProdPane.add(newProdDesc,0,15);
           updateProdPane.add(txtNewProdDesc,1,15);
           updateProdPane.add(btnNewProdDesc,2,15);

           btnNewProdDesc.setOnAction(j ->{
               int prodIndex = cmboProdList.getSelectionModel().getSelectedIndex();
               Product selectedProd = Product.get(prodIndex);
               String pDesc = txtNewProdDesc.getText();   
               selectedProd.setProductDescription(pDesc);
           });
        });        
        
    
    //update product description
    updateProdDesc.setOnAction(e ->{
            
           Label newProdDesc = new Label("Enter New Product Description");
           TextField txtNewProdDesc = new TextField();
           Button btnNewProdDesc = new Button("Update Product Description");
           
           updateProdPane.add(newProdDesc,0,16);
           updateProdPane.add(txtNewProdDesc,1,16);
           updateProdPane.add(btnNewProdDesc,2,16);

           btnNewProdDesc.setOnAction(j ->{
               int prodIndex = cmboProdList.getSelectionModel().getSelectedIndex();
               Product selectedProd = Product.get(prodIndex);
               String pDesc = txtNewProdDesc.getText();   
               selectedProd.setProductDescription(pDesc);
           });
        });     
        

    //update product quantity
    updateProdQuan.setOnAction(e ->{
            
           Label newProdQuan = new Label("Enter New Product Quantity");
           TextField txtNewProdQuan = new TextField();
           Button btnNewProdQuan = new Button("Update Product Quantity");
           
           updateProdPane.add(newProdQuan,0,17);
           updateProdPane.add(txtNewProdQuan,1,17);
           updateProdPane.add(btnNewProdQuan,2,17);

           btnNewProdQuan.setOnAction(j ->{
               int prodIndex = cmboProdList.getSelectionModel().getSelectedIndex();
               Product selectedProd = Product.get(prodIndex);
               int pQuan = Integer.parseInt(txtNewProdQuan.getText());   
               selectedProd.setQuantity(pQuan);
        });         
        
        
    });
    
    
    
    
        
}); //end of update product window
    

//START SUPPLIER BUTTON

 // Supplier Button
    btnSupplier.setOnAction(e -> {
    supplierPane = new GridPane();
    supplierPane.setAlignment(Pos.CENTER);
    supplierPane.add(lblSupplier, 0, 0);
    supplierPane.add(cmboSupplier, 0, 1);
    supplierPane.add(btnDisSup, 1, 1); 
   // supplierPane.add(txtSupInfo, 0, 1, 2, 1);
    supplierPane.add(lblUpdateSup, 0, 3);
    supplierPane.add(cmboSupOps, 0, 4);
    supplierPane.add(btnAddSup, 1, 5);
    supplierPane.add(btnUpdateSup, 0, 5);
    supplierPane.add(tblSuppliers, 0, 2, 2, 1);
    supplierPane.setHgap(20);
    supplierPane.setVgap(20);
    Scene supplierScene = new Scene(supplierPane, 500, 550);
    Stage supplierStage = new Stage();
    supplierStage.setScene(supplierScene);
    supplierStage.setTitle("Thrifty Store Suppliers");
    supplierStage.show();
    txtSupInfo.setEditable(false);
    });

    //when click button Create new supplier
     btnAddSup.setOnAction(e ->{
        addSupplierPane = new GridPane();
        addSupplierPane.setAlignment(Pos.CENTER);
        addSupplierPane.setVgap(10);
        addSupplierPane.setHgap(5);
    // Labels 
        addSupplierPane.add(lblSupName, 0, 0); 
        addSupplierPane.add(lblSupAddress, 0, 1);
        addSupplierPane.add(lblSupPhone, 0, 2);
        addSupplierPane.add(txtSupName, 1, 0); // TextFields
        addSupplierPane.add(txtSupAddress, 1, 1);
        addSupplierPane.add(txtSupPhone, 1, 2);
        addSupplierPane.add(btnAddNewSup, 1, 5);
    Scene addSupScene = new Scene(addSupplierPane, 400, 300);
    Stage addSupStage = new Stage();
    addSupStage.setScene(addSupScene);
    addSupStage.setTitle("Add Supplier");
    addSupStage.show();
    });

    //When click button Add new Supplier
    btnAddNewSup.setOnAction(e -> {
        boolean newSupName = txtSupName.getText().trim().isEmpty();
        boolean newSupAddress = txtSupAddress.getText().trim().isEmpty();
        boolean newSupPhone = txtSupPhone.getText().trim().isEmpty();        
        if(newSupName || newSupAddress || newSupPhone )
        {
            addSupEmpty.showAndWait();
        }
        else
        {
            String getNewSupName = txtSupName.getText();
            String getNewSupAddress = txtSupAddress.getText();
            String getNewSupPhone = txtSupPhone.getText();
            Supplier.add (new Supplier(getNewSupName, getNewSupAddress, getNewSupPhone));
            obsSupplier.add(Supplier.get(supArrayPos).getSupplierName());
            supArrayPos++;
            if (cmboSupplier.getSelectionModel().getSelectedIndex() >= 0)
            {
            txtSupInfo.appendText(Supplier.get(cmboSupplier.getSelectionModel().getSelectedIndex()).toString());
            }
            txtSupName.clear();
            txtSupAddress.clear();
            txtSupPhone.clear();

        }
    });  //end of button AddNewSup

//        tblSupplier.setItems(supplierTableData);
//        add value to each column 
//        tblcSupName.setCellValueFactory(new PropertyValueFactory<Supplier,String>("supplierName"));
//        tblcSupAddress.setCellValueFactory(new PropertyValueFactory<Supplier,String>("supplierAddress")); 
//        tblcSupPhone.setCellValueFactory(new PropertyValueFactory<Supplier,String>("supplierPhone"));
    
//UPDATE SUPPLIER

    btnUpdateSup.setOnAction(e -> {
    
    if(cmboSupOps.getSelectionModel().getSelectedIndex() >= 0)
    {    
       //Supplier label
        updateSupplierPane = new GridPane();
        updateSupplierPane.setHgap(10);
        updateSupplierPane.setVgap(10);
        updateSupplierPane.setAlignment(Pos.CENTER);
        
        updateSupplierPane.add(lblSupName2, 0, 0); 
        updateSupplierPane.add(lblSupAddress2, 0, 1);
        updateSupplierPane.add(lblSupPhone2, 0, 2);
        updateSupplierPane.add(txtSupName2, 1, 0); // TextFields
        updateSupplierPane.add(txtSupAddress2, 1, 1);
        updateSupplierPane.add(txtSupPhone2, 1, 2);
        updateSupplierPane.add(btnUpdateSup2, 1, 5);
        
        Scene updateSupplierScene = new Scene(updateSupplierPane, 400, 300);
        Stage updateSupplierStage = new Stage();
        updateSupplierStage.setScene(updateSupplierScene );
        updateSupplierStage.setTitle("Update Supplier");
        updateSupplierStage.show();
    }
    else 
    {
        Alert supplierSelectEmpty = new Alert(Alert.AlertType.ERROR);
        supplierSelectEmpty.setContentText("Please select a Supplier");
        supplierSelectEmpty.showAndWait();
    } 
    });
    
    btnUpdateSup2.setOnAction(e -> {
        
        int i = cmboSupOps.getSelectionModel().getSelectedIndex();
        Supplier selectedSupplier = Supplier.get(i);

        String getNewSupName = txtSupName2.getText();
        selectedSupplier.setSupplierName(getNewSupName);
        
        String getNewSupAddress = txtSupAddress2.getText();
        selectedSupplier.setSupplierAddress(getNewSupAddress);
        
        String getNewSupPhone = txtSupPhone2.getText();
        selectedSupplier.setSupplierPhone(getNewSupPhone);
        
        obsSupplier.clear();
        for(Supplier sup: Supplier)
            {
                obsSupplier.add(sup.getSupplierName());
            }
        
        txtSupName2.clear();
        txtSupAddress2.clear();
        txtSupPhone2.clear();
    
    });

//DISPLAY SUPPLIER
    btnDisSup.setOnAction(e -> {
    
    if(cmboSupplier.getSelectionModel().getSelectedIndex() >= 0)
    {    
       int i = cmboSupplier.getSelectionModel().getSelectedIndex();
       Supplier selectSup = Supplier.get(i);
       
       obsSupProducts.clear();
       
       for(Product p : Product)
       {
           if( p.supplierName == selectSup)
           {
               obsSupProducts.add(p);
           }  
           tblSuppliers.setItems(obsSupProducts);
       }
       
    }
    else 
    {
        Alert supplierSelectEmpty = new Alert(Alert.AlertType.ERROR);
        supplierSelectEmpty.setContentText("Please select a Supplier to display");
        supplierSelectEmpty.showAndWait();
    }  
    });
    
    tblcSupProduct.setCellValueFactory(new PropertyValueFactory<Product,String>("ProductName"));
    tblcProdCat.setCellValueFactory(new PropertyValueFactory<Product,String>("ProductCategory"));
    tblcPrice.setCellValueFactory(new PropertyValueFactory<Product,Double>("SalePrice"));
    

//START SCHEDULE BUTTON
    btnSchedule.setOnAction(e -> {
    schedulePane = new GridPane();
    schedulePane.setHgap(10);
    schedulePane.setVgap(10); 
    schedulePane.setAlignment(Pos.CENTER);
    
    schedulePane.add(lblEmpSel, 0, 0);
    schedulePane.add(cmboEmpSch, 1, 0);
    schedulePane.add(lblDaySelection, 0, 1);
    schedulePane.add(daySelection, 0, 2, 3, 1); 
    schedulePane.add(lblStartTime, 0, 3);
    schedulePane.add(cmboStartTime, 0, 4);
    schedulePane.add(lblEndTime, 1, 3);
    schedulePane.add(cmboEndTime, 1, 4);
    schedulePane.add(btnAddEmpSch, 2, 4);
    schedulePane.add(tblSchedule, 0, 5, 3, 1);

    Scene scheduleScene = new Scene(schedulePane, 600, 600);
    Stage scheduleStage = new Stage();
    scheduleStage.setScene(scheduleScene);
    scheduleStage.setTitle("Thrifty Store Schedule");
    scheduleStage.show();

    daySelection.setOnAction(b -> {
        ds = daySelection.getValue();
        });
    });
    
    //Add schedule to employee
        btnAddEmpSch.setOnAction(c -> {

            if(cmboEmpSch.getSelectionModel().getSelectedIndex() >= 0 &&
                    cmboStartTime.getSelectionModel().getSelectedIndex() >= 0 &&
                    cmboEndTime.getSelectionModel().getSelectedIndex() >= 0 &&
                    daySelection != null)
            {
                //Schedule.Employee.add(Employee.get(cmboEmpSch.getSelectionModel().getSelectedIndex()));
                Employee shiftEmp = Employee.get(cmboEmpSch.getSelectionModel().getSelectedIndex());
                String shiftDate = String.valueOf(daySelection.getValue());
                String shiftBeg = String.valueOf(cmboStartTime.getSelectionModel().getSelectedItem());
                String shiftEnd = String.valueOf(cmboEndTime.getSelectionModel().getSelectedItem());
                
                Schedule newShift = new Schedule(shiftEmp, shiftDate, shiftBeg, shiftEnd);
                Shifts.add(newShift);
                schTableData.add(newShift);

            }
            cmboStartTime.getSelectionModel().clearSelection();
            cmboEndTime.getSelectionModel().clearSelection();
            cmboEmpSch.getSelectionModel().clearSelection();
            
            tblSchedule.setItems(schTableData);
        });


        tblcSchEmp.setCellValueFactory(new PropertyValueFactory<Schedule,Employee>("ShiftEmp"));
        tblcDate.setCellValueFactory(new PropertyValueFactory<Schedule,String>("Date"));
        tblcStart.setCellValueFactory(new PropertyValueFactory<Schedule,String>("ShiftBegTime"));
        tblcEnd.setCellValueFactory(new PropertyValueFactory<Schedule,String>("ShiftEndTime"));
      
//Create customer account        
     btnCreateCustAccount.setOnAction(e -> {

        custAcctPane = new GridPane();    
        custAcctPane.add(lblCustName, 0, 0);
        custAcctPane.add(txtCustName, 1, 0);
        custAcctPane.add(lblCustPhone, 0, 1);
        custAcctPane.add(txtCustPhone, 1, 1);
        custAcctPane.add(lblCustAddress, 0, 2);
        custAcctPane.add(txtCustAddress, 1, 2);
        custAcctPane.add(lblCustEmail, 0, 3);
        custAcctPane.add(txtCustEmail, 1, 3);
        custAcctPane.add(chkThriftyClub, 1, 4);
        custAcctPane.add(btnNewCustAccount, 0, 5, 2, 1);

        custAcctPane.setHgap(10);
        custAcctPane.setVgap(15);
        custAcctPane.setAlignment(Pos.CENTER);

        Scene custAcctScene = new Scene(custAcctPane, 400, 400);
        Stage custAcctStage = new Stage();
        custAcctStage.setScene(custAcctScene);
        custAcctStage.setTitle("Thrifty Store Customer");
        custAcctStage.show();

    });

    //when click Create new customer  
        btnNewCustAccount.setOnAction(f -> {


        if(chkThriftyClub.isSelected())
        {
            if(txtCustName.getText().length() > 0 &&
                    txtCustPhone.getText().length() > 0 &&
                    txtCustAddress.getText() == null &&
                    txtCustEmail.getText() == null)
            {
                Customer.add(new Customer(txtCustName.getText(), txtCustPhone.getText(), true));
            }
            else
            {
                Customer.add(new Customer(txtCustName.getText(), txtCustPhone.getText(),
                txtCustAddress.getText(), txtCustEmail.getText(), true));
            }
        }
        else
        {
            if(txtCustName.getText().length() > 0 &&
                    txtCustPhone.getText().length() > 0 &&
                    txtCustAddress.getText() == null &&
                    txtCustEmail.getText() == null)
            {
                Customer.add(new Customer(txtCustName.getText(), txtCustPhone.getText(), false));
            }
            else
            {
                Customer.add(new Customer(txtCustName.getText(), txtCustPhone.getText(),
                txtCustAddress.getText(), txtCustEmail.getText(), false));
            }
        }

        txtCustName.clear();
        txtCustPhone.clear();
        txtCustAddress.clear();
        txtCustEmail.clear();
        chkThriftyClub.setSelected(false);

        });
        
//when click create customer account    
     btnCreateCustAccount.setOnAction(e -> {

        custAcctPane = new GridPane();    
        custAcctPane.add(lblCustName, 0, 0);
        custAcctPane.add(txtCustName, 1, 0);
        custAcctPane.add(lblCustPhone, 0, 1);
        custAcctPane.add(txtCustPhone, 1, 1);
        custAcctPane.add(lblCustAddress, 0, 2);
        custAcctPane.add(txtCustAddress, 1, 2);
        custAcctPane.add(lblCustEmail, 0, 3);
        custAcctPane.add(txtCustEmail, 1, 3);
        custAcctPane.add(chkThriftyClub, 1, 4);
        custAcctPane.add(btnNewCustAccount, 0, 5, 2, 1);
        custAcctPane.setHgap(10);
        custAcctPane.setVgap(15);
        custAcctPane.setAlignment(Pos.CENTER);

        Scene custAcctScene = new Scene(custAcctPane, 400, 400);
        Stage custAcctStage = new Stage();
        custAcctStage.setScene(custAcctScene);
        custAcctStage.setTitle("Thrifty Store Customer");
        custAcctStage.show();
        
//to create new customer
        btnNewCustAccount.setOnAction(f -> {
        if(chkThriftyClub.isSelected())
        {
            if(txtCustName.getText().length() > 0 &&
                    txtCustPhone.getText().length() > 0 &&
                    txtCustAddress.getText() == null &&
                    txtCustEmail.getText() == null)

            {

                Customer.add(new Customer(txtCustName.getText(), txtCustPhone.getText(), true));
                obsCust.add(Customer.get(custArrayPos).getCustomerName());
                custTableData.add(Customer.get(custArrayPos));
                custArrayPos++;

            }
            else
            {

                Customer.add(new Customer(txtCustName.getText(), txtCustPhone.getText(),
                txtCustAddress.getText(), txtCustEmail.getText(), true));              
                obsCust.add(Customer.get(custArrayPos).getCustomerName());
                custTableData.add(Customer.get(custArrayPos));
                custArrayPos++;

            }
        }
        else
        {
            if(txtCustName.getText().length() > 0 &&
                    txtCustPhone.getText().length() > 0 &&
                    txtCustAddress.getText() == null &&
                    txtCustEmail.getText() == null)

            {
                Customer.add(new Customer(txtCustName.getText(), txtCustPhone.getText(), false));
                obsCust.add(Customer.get(custArrayPos).getCustomerName());
                custTableData.add(Customer.get(custArrayPos));
                custArrayPos++;
            }
            else
            {

                Customer.add(new Customer(txtCustName.getText(), txtCustPhone.getText(),
                txtCustAddress.getText(), txtCustEmail.getText(), false));
                obsCust.add(Customer.get(custArrayPos).getCustomerName());
                custTableData.add(Customer.get(custArrayPos));
                custArrayPos++;
            }          
            for(Customer c: Customer)
            {
                if(c.getClubMember() == true)
                {
                    ClubMembers.add(c);
                }
            }
        }

        txtCustName.clear();
        txtCustPhone.clear();
        txtCustAddress.clear();
        txtCustEmail.clear();
        chkThriftyClub.setSelected(false);
        });

    });
 
//MANAGER CUSTOMER BUTTON//
    btnManageCust.setOnAction(e -> {
        
        manageCustPane = new GridPane();      
        manageCustPane.add(tblCust, 0, 0, 6, 1);
        manageCustPane.add(btnEditCust, 4, 1);
        manageCustPane.add(cmboCust, 3, 1);       
        manageCustPane.setHgap(10);
        manageCustPane.setVgap(15);
        manageCustPane.setAlignment(Pos.CENTER);  
        tblCust.setPrefWidth(500);
        
        Scene manageCustScene = new Scene(manageCustPane, 600, 600);
        Stage manageCustStage = new Stage();
        manageCustStage.setScene(manageCustScene);
        manageCustStage.setTitle("Thrifty Store Customers");
        manageCustStage.show();
    
    });
   
    tblCust.setItems(custTableData);

    tblcCustName.setCellValueFactory(new PropertyValueFactory<Customer,String>("CustomerName"));
    tblcCustPhone.setCellValueFactory(new PropertyValueFactory<Customer,String>("CustomerPhone"));
    tblcCustAddress.setCellValueFactory(new PropertyValueFactory<Customer,String>("CustomerAddress"));
    tblcCustEmail.setCellValueFactory(new PropertyValueFactory<Customer,String>("CustomerEmail"));
    tblcCustMember.setCellValueFactory(new PropertyValueFactory<Customer,Boolean>("ClubMember"));
    
    
     Stage editCustStage = new Stage();

//EDIT CUSTOMER//
    btnEditCust.setOnAction(e -> {
        
    if(cmboCust.getSelectionModel().getSelectedIndex() > -1)
    {
        editCustPane = new GridPane();    
        editCustPane.add(lblCustName, 0, 0);
        editCustPane.add(txtCustName, 1, 0);
        editCustPane.add(lblCustPhone, 0, 1);
        editCustPane.add(txtCustPhone, 1, 1);
        editCustPane.add(lblCustAddress, 0, 2);
        editCustPane.add(txtCustAddress, 1, 2);
        editCustPane.add(lblCustEmail, 0, 3);
        editCustPane.add(txtCustEmail, 1, 3);
        editCustPane.add(chkThriftyClub, 1, 4);
        editCustPane.add(btnEditCustInfo, 0, 5, 2, 1);

        editCustPane.setHgap(10);
        editCustPane.setVgap(15);
        editCustPane.setAlignment(Pos.CENTER);       
        Scene editCustScene = new Scene(editCustPane, 400, 400);

        //Stage editCustStage = new Stage();
        editCustStage.setScene(editCustScene);
        editCustStage.setTitle("Thrifty Store Edit Customer");
        editCustStage.show();

        txtCustName.setText(Customer.get(cmboCust.getSelectionModel().getSelectedIndex()).getCustomerName());
        txtCustPhone.setText(Customer.get(cmboCust.getSelectionModel().getSelectedIndex()).getCustomerPhone());
        txtCustAddress.setText(Customer.get(cmboCust.getSelectionModel().getSelectedIndex()).getCustomerAddress());
        txtCustEmail.setText(Customer.get(cmboCust.getSelectionModel().getSelectedIndex()).getCustomerEmail());
        if(Customer.get(cmboCust.getSelectionModel().getSelectedIndex()).getClubMember() == true)
        {
            chkThriftyClub.setSelected(true);
        }
        else
        {
            chkThriftyClub.setSelected(false);
        }
        
    }      
    });
    
    btnEditCustInfo.setOnAction(e -> {
        Customer.get(cmboCust.getSelectionModel().getSelectedIndex()).setCustomerName(txtCustName.getText());
        
        Customer.get(cmboCust.getSelectionModel().getSelectedIndex()).setCustomerPhone(txtCustPhone.getText());       
        Customer.get(cmboCust.getSelectionModel().getSelectedIndex()).setCustomerAddress(txtCustAddress.getText());      
        Customer.get(cmboCust.getSelectionModel().getSelectedIndex()).setCustomerEmail(txtCustEmail.getText());       
        if(chkThriftyClub.isSelected())
        {
            Customer.get(cmboCust.getSelectionModel().getSelectedIndex()).setClubMember(true);
        }
        else
        {
            Customer.get(cmboCust.getSelectionModel().getSelectedIndex()).setClubMember(false);
        }     
        System.out.println(Customer.get(cmboCust.getSelectionModel().getSelectedIndex()).getCustomerPhone());       
        custTableData.remove(Customer.get(cmboCust.getSelectionModel().getSelectedIndex()));    
        custTableData.add(Customer.get(cmboCust.getSelectionModel().getSelectedIndex()));       
        editCustStage.close();
    }); 

    
//SALE REPORTS//
    btnSalesReports.setOnAction(s -> {
        salesReportPane = new GridPane();
        salesReportPane.setAlignment(Pos.CENTER);

        Scene salesReportScene = new Scene(salesReportPane, 400, 400);
        Stage salesReportStage = new Stage();
        salesReportStage.setScene(salesReportScene);
        salesReportStage.setTitle("Thrifty Store Sales Report");
        salesReportStage.show();
    });
    
//EMPLOYEE REPORT//
    btnEmployeeReports.setOnAction(e -> {

        empReportsPane = new GridPane();
        empReportsPane.setAlignment(Pos.CENTER);
        empReportsPane.setHgap(15);
        empReportsPane.setVgap(10);
        empReportsPane.setPadding(new Insets(15, 10, 10, 15));

        empReportsPane.add(lblEmp, 0, 0);
        empReportsPane.add(cmboEmp, 1, 0);
        empReportsPane.add(lblEmpStartWeek, 0, 1);
        empReportsPane.add(lblEmpEndWeek, 1, 1);
        empReportsPane.add(dpEmpShiftStart, 0, 2);
        empReportsPane.add(dpEmpShiftEnd, 1, 2);
        empReportsPane.add(btnGenEmpReports, 2, 2);
        empReportsPane.add(taEmpReport, 0, 3, 5, 5);
        taEmpReport.setMinWidth(600);

        Scene empReportsScene = new Scene(empReportsPane, 700, 350);
        Stage empReportsStage = new Stage();
        empReportsStage.setScene(empReportsScene);
        empReportsStage.setTitle("Thrifty Store Employee Report");
        empReportsStage.show();
    });
    

//GENERATE EMPLOYEE REPORT///
     btnGenEmpReports.setOnAction(g -> {

        int empIndex = cmboEmp.getSelectionModel().getSelectedIndex();
        Employee emp = Employee.get(empIndex);
        String empData = "";
        int weeklyHours = 0;

        for (int i = 0; i < Shifts.size(); i++) {
            Schedule shift = Shifts.get(i);

            if(shift.getShiftEmp().equals(emp)) {

                // Split strings by blankspace
                String start = shift.getShiftBegTime();
                int s = start.indexOf(' ');
                String startTime = start.substring(0, s);

                String end = shift.getShiftEndTime();
                int e = end.indexOf(' ');
                String endTime = end.substring(0, e);

                // Split string by colon
                int s1 = startTime.indexOf(':');
                String sTime = startTime.substring(0, s1);

                int e1 = endTime.indexOf(':');
                String eTime = endTime.substring(0, e1);

                // Convert to integers
                int sNum = Integer.parseInt(sTime);
                int eNum = Integer.parseInt(eTime);

                // Create temp numbers
                int tempNum = 0;
                int tempNum1 = 0;
                int hours = 0;

                if(sNum < 12) {
                    tempNum = (12 - sNum);
                }
                else {

                }

                if(eNum < 12) {
                    tempNum1 = eNum;
                }

                hours = (tempNum + tempNum1);


                //Convert to local dates
                LocalDate sT = dpEmpShiftStart.getValue();
                LocalDate eT = dpEmpShiftEnd.getValue();
                LocalDate shiftDay = LocalDate.parse(shift.getDate());

                    if((shiftDay.isEqual(sT) || shiftDay.isAfter(sT)) && shiftDay.isBefore(eT)) {


                        empData += "Name: "+ shift.getShiftEmp().getEmployeeName() 
                            + "  Date:  " + shift.getDate() + "  Begin Time: " + 
                            shift.getShiftBegTime() +  "  End Time: " + 
                            shift.getShiftEndTime() + "  Hours Worked: " + hours + "\n";

                        weeklyHours += hours;
                    }


            }

        }
        empData += "\nWeekly Hours: " + weeklyHours;
        taEmpReport.setText(empData);

    });


//MONTHLY EXPENSE REPORT
       btnMnthlyExpReports.setOnAction(m -> {
        mnthlyExpReportsPane = new GridPane();
        mnthlyExpReportsPane.setAlignment(Pos.CENTER);
        mnthlyExpReportsPane.setHgap(5);
        mnthlyExpReportsPane.setVgap(10);
        
        mnthlyExpReportsPane.add(lblMonth, 0, 0);
        mnthlyExpReportsPane.add(cmboMonthList, 1, 0);
        mnthlyExpReportsPane.add(btnViewExpenses, 2, 0);
        mnthlyExpReportsPane.add(taExpenses, 0, 2, 10, 5);
        mnthlyExpReportsPane.add(lblTotalExp, 0, 12);
        mnthlyExpReportsPane.add(txtTotExp, 1, 12);
        txtTotExp.setEditable(false);
        taExpenses.setEditable(false);
        
        Scene mnthlyExpReportsScene = new Scene(mnthlyExpReportsPane, 750, 500);
        Stage mnthlyExpReportsStage = new Stage();
        mnthlyExpReportsStage.setScene(mnthlyExpReportsScene);
        mnthlyExpReportsStage.setTitle("Thrifty Store Expenses Report");
        mnthlyExpReportsStage.show();
        mnthlyExpReportsStage.setOnCloseRequest(c -> {
        cmboMonthList.getSelectionModel().clearSelection();
        taExpenses.clear();
        txtTotExp.clear();
        });
    });
 
       
//VIEW EXPENSE
    btnViewExpenses.setOnAction(v -> {

        int month = cmboMonthList.getSelectionModel().getSelectedIndex();      
    
        if(month == 0)
        {
          monthExp("01");   
        }
        else if(month == 1)
        {
          monthExp("02");
        }
        else if(month == 2)
        {
          monthExp("03");
        }
        else if(month == 3)
        {
          monthExp("04");
        }
        else if(month == 4)
        {
          monthExp("05");
        }  
        else if(month == 5)
        {
          monthExp("06");
        }
        else if(month == 6)
        {
          monthExp("07");
        }
        else if(month == 7)
        {
          monthExp("08");
        }
        else if(month == 8)
        {
          monthExp("09");
        }
        else if(month == 9)
        {
          monthExp("10");
        }
        else if(month == 10)
        {
          monthExp("11");
        }
        else if(month == 11)
        {
            monthExp("12");
        }  
    });
           

////START SHOPPING CART
Stage shopCartStage = new Stage();
    
    btnAddShopCart.setOnAction(e ->{
        
        if(cmboSelectCust.getSelectionModel().getSelectedIndex() > -1)
        {
        
        shopCartPane = new GridPane();
        
        shopCartPane.add(lblSelectProd, 0, 0);
        
        shopCartPane.add(lblSelectAmount, 0, 1);
        
        shopCartPane.add(cmboProdPurch, 1, 0);
        
        shopCartPane.add(txtAmount, 1, 1);
        
        shopCartPane.add(btnAddProdCart, 1, 2);
        
        shopCartPane.setAlignment(Pos.CENTER);
        
        shopCartPane.setHgap(10);
        
        shopCartPane.setVgap(10);
        
        
        Scene shopCartScene = new Scene(shopCartPane, 400, 400);

        shopCartStage.setScene(shopCartScene);

        shopCartStage.setTitle("Thrifty Store Shopping Cart");

        shopCartStage.show();
        
        CustomerOrder.add(new CustomerOrder(Customer.get(cmboSelectCust.getSelectionModel().getSelectedIndex())));
        
        }
        
    });
    
    btnAddProdCart.setOnAction(e -> {
        
        CustomerOrder.get(cmboSelectCust.getSelectionModel().getSelectedIndex()).addToCart(Product.get(cmboProdPurch.getSelectionModel().getSelectedIndex()));
        
        CustomerOrder.get(cmboSelectCust.getSelectionModel().getSelectedIndex()).addQuantities(Integer.valueOf(txtAmount.getText()));
        
        cmboProdPurch.getSelectionModel().clearSelection();
        
        txtAmount.clear();
        
    });
    
    shopCartStage.setOnCloseRequest(e -> {
        
        CustomerOrder.get(cmboSelectCust.getSelectionModel().getSelectedIndex()).calculateOrderQuantity();
        
        for(Product p: CustomerOrder.get(cmboSelectCust.getSelectionModel().getSelectedIndex()).ShoppingCart)
        {
            p.productSold(CustomerOrder.get(cmboSelectCust.getSelectionModel().getSelectedIndex()).ItemQuantities.get(CustomerOrder.get(cmboSelectCust.getSelectionModel().getSelectedIndex()).ShoppingCart.indexOf(p)));
        }
        
        taPOS.setText(CustomerOrder.get(cmboSelectCust.getSelectionModel().getSelectedIndex()).displayOrder());
        
        txtTotal.setText(String.valueOf(CustomerOrder.get(cmboSelectCust.getSelectionModel().getSelectedIndex()).getGrandTotal()));
        
        taReceipt.setText(CustomerOrder.get(cmboSelectCust.getSelectionModel().getSelectedIndex()).toString());
        
        
    });
    
    btnPrint.setOnAction(e -> {
        
        receiptPane = new GridPane();
        
        receiptPane.add(taReceipt, 0, 0);
        
        receiptPane.setAlignment(Pos.CENTER);
        
        Scene receiptScene = new Scene(receiptPane, 700, 700);
        
        Stage receiptStage = new Stage();

        receiptStage.setScene(receiptScene);

        receiptStage.setTitle("Thrifty Store Customer Receipt");

        receiptStage.show();
        
        taReceipt.setMinSize(300, 600);
        
        
    });
    
    
 
    
///LOAD INTO DB/////
    loadEmployeeDB();
    loadSupplierDB();
    loadExpenseDB();
    loadCustomerDB();
    loadProductDB();

    }
    
    
    public static void monthExp(String monthNum)
    {
            taExpenses.clear();
            txtTotExp.clear();
            for(Expense e : Expense)
            {
                String dueDate =  e.getDueDate();
                String mon = dueDate.substring(5, 7);
                String expenses = "";
                double expTotal = 0.0;
                String mortgages = "";
                String utilities = "";
                String lawnCare = "";
                String maintenance = "";
                String insurance = "";
                String cleaning = "";
                String mechanics = "";
                
                expenses += "Monthly Expenses: \n";
               
                for(Expense ex : Expense)
                {       
                    if(monthNum.equals(ex.getDueDate().substring(5,7))) 
                    {    
                       if(ex.toString().contains("Mortgages"))
                       {    
                         mortgages += ex.toString() + "\n";
                       }
                       else if (ex.toString().contains("Utilities"))
                       {    
                        utilities += ex.toString() + "\n";
                       }
                       else if(ex.toString().contains("Lawn Care"))
                       {        
                        lawnCare += ex.toString() + "\n";
                       }
                       else if(ex.toString().contains("Maintenance"))
                       {    
                        maintenance += ex.toString() + "\n";
                       }
                       else if(ex.toString().contains("Insurance"))
                       {    
                        insurance += ex.toString() + "\n";
                       }
                       else if(ex.toString().contains("Cleaning"))
                       {
                         cleaning += ex.toString() + "\n";
                       }
                       else if(ex.toString().contains("Mechanics"))
                       {
                        mechanics += ex.toString() + "\n";
                       }
                        expTotal += ex.getAmount();
                    }
                }
                expenses += "Mortgages: \n" + mortgages + "\n";
                expenses += "Utilities: \n" + utilities + "\n";
                expenses += "Lawn Care: \n" + lawnCare + "\n";
                expenses += "Maintenance: \n" + maintenance + "\n";
                expenses += "Insurance: \n" + insurance + "\n";
                expenses += "Cleaning: \n" + cleaning + "\n";
                expenses += "Mechanics: \n" + mechanics + "\n";
                String expTot = Double.toString(expTotal);
                taExpenses.setText(expenses);
                txtTotExp.setText("$" + expTot); 
        }
    }
    public static void main(String[] args) 
    {
        launch(args);
    }
    @Override
    public void stop() {
        for (int i = 0; i < Customer.size(); i++) {
            Customer tempCust = Customer.get(i);
            String sqlQuery = "INSERT INTO CUSTOMER (customerID,NAME,ADDRESS,PHONE,EMAIL,MEMBER) "
                    + "VALUES (" + tempCust.getCustID() + ",\'" + tempCust.getCustomerName()
                    +"\'\'" + tempCust.getCustomerAddress() + "\'," + tempCust.getCustomerPhone() + ",\'" + 
                    tempCust.getCustomerEmail() + "\',\'" + tempCust.getClubMember() + "\')";
            sendDBCommand(sqlQuery);
        }
        for (int i=0;i<Employee.size();i++){
            Employee tempEmp = Employee.get(i);
            String sqlQuery = "INSERT INTO EMPLOYEE (employeeID,NAME,POSITION,ADDRESS,PHONE,TYPE,WAGE) "
                    + "VALUES ("+tempEmp.getEmployeeID()+",\'"+tempEmp.getEmployeeName()
                    +"\',\'"+tempEmp.getEmployeePos()+"\',\'"+tempEmp.getEmployeeAddress()+"\',"+
                    tempEmp.getEmployeePhone()+",\'"+tempEmp.getEmpStatus()+"\',"+tempEmp.getEmployeeWage()+")";
            sendDBCommand(sqlQuery);
        }
        for (int i=0;i<Product.size();i++){
            Product tempProd = Product.get(i);
            String sqlQuery = "INSERT INTO PRODUCT (productID,NAME,PRICE,CATEGORY,QUANTITY,DESCRIPTION) "
                    + "VALUES ("+tempProd.getProductID()+",\'"+tempProd.getProductName()
                    +"\',"+tempProd.getSalePrice()+",\'"+tempProd.getProductCategory()
                    +"\',"+tempProd.getProductQuantity()+",\'"+tempProd.getProductDescription()+"\')";
            sendDBCommand(sqlQuery);
        }
        for (int i=0;i<Expense.size();i++){
            Expense tempExp = Expense.get(i);
            String sqlQuery = "INSERT INTO EXPENSE (expenseID,NAME,AMOUNT,DUEDATE,PAID) "
                    + "VALUES ("+tempExp.getExpID()+",\'"+tempExp.getCategory()
                    +"\',"+tempExp.getAmount()+",\'"+tempExp.getDueDate()
                    +"\',\'"+tempExp.getPaid()+"\')";
            sendDBCommand(sqlQuery);
        }
        for (int i=0;i<Supplier.size();i++){
            Supplier tempSupp = Supplier.get(i);
            String sqlQuery = "INSERT INTO SUPPLIER (supplierID,NAME,ADDRESS,PHONE) "
                    + "VALUES ("+tempSupp.getSupplierID()+",\'"+tempSupp.getSupplierName()
                    +"\',\'"+tempSupp.getSupplierAddress()+"\',"+tempSupp.getSupplierPhone()+")";
            sendDBCommand(sqlQuery);
        }

    }      
    public void loadCustomerDB() {
        String sqlQuery = "SELECT * FROM CUSTOMER";
        //sendDBCommand(sqlQuery);
        String URL = "jdbc:oracle:thin:@localhost:1521:XE";
        String userID = "javauser"; 
        String userPASS = "javapass"; 
        OracleDataSource ds;
        Connection dbConn;
        Statement cmmtStmt;
        ResultSet dbResults = null;

        System.out.println(sqlQuery);

        
        try
        {
            dbConn = getDBConnection(URL,userID,userPASS);
            cmmtStmt = dbConn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            dbResults = cmmtStmt.executeQuery(sqlQuery); 

        }
        catch (SQLException e)
        {
            System.out.println(e.toString());
        }        

        try
        {
            while (dbResults.next())
            {
                
                int custID = dbResults.getInt("customerID");
                String name = dbResults.getString("NAME");
                String address = dbResults.getString("ADDRESS");
                String phone = dbResults.getString("PHONE");
                String email = dbResults.getString("EMAIL");
                Boolean member = dbResults.getBoolean("MEMBER");
                Customer newCustomer = new Customer(name,phone,address,email,member);
                
                //Customer newCustomer = new Customer(name,phone,address);
                Customer.add(newCustomer);
            }
            dbResults.close();
        }
        catch (SQLException sqle)
        {   

        }

    }
    public void loadEmployeeDB() {

        String sqlQuery = "SELECT * FROM EMPLOYEE";
        //sendDBCommand(sqlQuery);
        String URL = "jdbc:oracle:thin:@localhost:1521:XE";
        String userID = "javauser"; 
        String userPASS = "javapass"; 
        OracleDataSource ds;
        Connection dbConn;
        Statement cmmtStmt;
        ResultSet dbResults = null;
       
        System.out.println(sqlQuery);

        
        try
        {
            dbConn = getDBConnection(URL,userID,userPASS);
            cmmtStmt = dbConn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            dbResults = cmmtStmt.executeQuery(sqlQuery); 
            
        }
        catch (SQLException e)
        {
            System.out.println(e.toString());
        }
        
        try
        {
            while (dbResults.next())
            {
                
                int empID = dbResults.getInt("employeeID");
                String name = dbResults.getString("NAME");
                String position = dbResults.getString("POSITION");
                String address = dbResults.getString("ADDRESS");
                String phone = dbResults.getString("PHONE");
                String type = dbResults.getString("TYPE");
                String username = dbResults.getString("USERNAME");
                String password = dbResults.getString("PASSWORD");
                int status = 0;

                switch (type){
                    case "Part-Time": status = 0; break;
                    case "Full-Time": status = 1; break;
                }
                double wage = dbResults.getDouble("WAGE");
                //String user = dbResults.getString("USERNAME");
                //String pass = dbResults.getString("PASSWORD");
                Employee newEmployee = new Employee(empID,name,position,phone,address,status,wage,username,password);

                //Customer newCustomer = new Customer(name,phone,address);
                Employee.add(newEmployee);
                empTableData.add(newEmployee);
                obsEmp.add(Employee.get(empArrayPos).getEmployeeName());
                empArrayPos++;
            }
            dbResults.close();
        }
        catch (SQLException sqle)
        {
            
        }
    }
    public void loadSupplierDB() {

        String sqlQuery = "SELECT * FROM SUPPLIER";
        //sendDBCommand(sqlQuery);
        String URL = "jdbc:oracle:thin:@localhost:1521:XE";
        String userID = "javauser"; 
        String userPASS = "javapass"; 
        OracleDataSource ds;
        Connection dbConn;
        Statement cmmtStmt;
        ResultSet dbResults = null;
       
        System.out.println(sqlQuery);
 
        try
        {
            dbConn = getDBConnection(URL,userID,userPASS);
            cmmtStmt = dbConn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            dbResults = cmmtStmt.executeQuery(sqlQuery); 
        }
        catch (SQLException e)
        {
            System.out.println(e.toString());
        }
        try
        {
            while (dbResults.next())
            {
                
                int suppID = dbResults.getInt("supplierID");
                String name = dbResults.getString("NAME");
                String address = dbResults.getString("ADDRESS");
                String phone = dbResults.getString("PHONE");
                Supplier newSupplier = new Supplier(name,address,phone);
                Supplier.add(newSupplier);
                obsSupplier.add(Supplier.get(supArrayPos).getSupplierName());
                supArrayPos++;
                
                }
            dbResults.close();
        }
        catch (SQLException sqle)
        {
            

        }
    }
    public void loadExpenseDB() {

        String sqlQuery = "SELECT * FROM EXPENSE";
        //sendDBCommand(sqlQuery);
        String URL = "jdbc:oracle:thin:@localhost:1521:XE";
        String userID = "javauser"; 
        String userPASS = "javapass"; 
        OracleDataSource ds;
        Connection dbConn;
        Statement cmmtStmt;
        ResultSet dbResults = null;


        System.out.println(sqlQuery);

        
        try
        {
            dbConn = getDBConnection(URL,userID,userPASS);
            cmmtStmt = dbConn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            dbResults = cmmtStmt.executeQuery(sqlQuery);
        }
        catch (SQLException e)
        {
            System.out.println(e.toString());
        }

        try
        {
            while (dbResults.next())
            {
                int expID = dbResults.getInt("expenseID");
                String name = dbResults.getString("NAME");
                double amount = dbResults.getDouble("AMOUNT");
                String dueDate = dbResults.getString("DUEDATE");
                String paid = dbResults.getString("PAID");
                Expense newExpense = new Expense(name,amount,dueDate,paid);

                Expense.add(newExpense);

                expTableData.add(newExpense);

                editExpenseList.add(newExpense.getCategory());


                obsExp.add(Expense.get(expArrayPos).toString());
                expArrayPos++;

                tblExpenses.refresh();
                tblExpenses.setItems(expTableData);

                }
            dbResults.close();
        }
        catch (SQLException sqle)
        {

        }

    }
   public void loadProductDB() {

        String sqlQuery = "SELECT * FROM PRODUCT";
        String sqlQuery2 = "SELECT * FROM SUPPLYORDER";
        //sendDBCommand(sqlQuery);
        String URL = "jdbc:oracle:thin:@localhost:1521:XE";
        String userID = "javauser"; 
        String userPASS = "javapass"; 
        OracleDataSource ds;
        Connection dbConn;
        Statement cmmtStmt;
        ResultSet dbResults = null;
        ResultSet dbResults2 = null;

        System.out.println(sqlQuery);        

        try
        {
            dbConn = getDBConnection(URL,userID,userPASS);
            cmmtStmt = dbConn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            dbResults = cmmtStmt.executeQuery(sqlQuery); 
            //dbResults2 = cmmtStmt.executeQuery(sqlQuery2);
        }

        catch (SQLException e)
        {
            System.out.println(e.toString());
        }
        try
        {
            dbConn = getDBConnection(URL,userID,userPASS);
            cmmtStmt = dbConn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            dbResults2 = cmmtStmt.executeQuery(sqlQuery2);
        }

        catch (SQLException e)
        {
            System.out.println(e.toString());
        }
        
        try
        {
            while (dbResults.next())
            {
                int prodID = dbResults.getInt("productID");
                String name = dbResults.getString("NAME");
                double price = dbResults.getDouble("PRICE");
                String category = dbResults.getString("CATEGORY");
                int quantity = dbResults.getInt("QUANTITY");
                String description = dbResults.getString("DESCRIPTION");
                double weight = dbResults.getDouble("WEIGHT");
                
                while (dbResults2.next()){
                    int supplierID = dbResults2.getInt("supplierID");
                    Supplier supplierName = Supplier.get(supplierID);
                    double pricePaid = dbResults2.getDouble("Price");
                    Product newProduct = new Product(prodID,name,category,weight,description,pricePaid,price,supplierName,quantity);
                    Product.add(newProduct);
                    prodTableData.add(newProduct);

                    obsProduct.add(Product.get(prodArrayPos).getProductName());  
                    prodArrayPos++;
                    tblInventory.setItems(prodTableData);
                    
                }
                dbResults2.close();
            }
            dbResults.close();
        }
        catch (SQLException sqle)
        {

        }
    }
    public void DeleteEmployeeDB(Employee selectedEmp){

        String sqlQuery = "DELETE FROM EMPLOYEE WHERE employeeID = "+selectedEmp.getEmployeeID()+"";
        sendDBCommand(sqlQuery);
    }  
    public void sendDBCommand(String sqlQuery)
    {
        String URL = "jdbc:oracle:thin:@localhost:1521:XE";
        String userID = "javauser"; 
        String userPASS = "javapass"; 
        OracleDataSource ds;
        Connection dbConn;
        Statement cmmtStmt;
        ResultSet dbResults;
       
        System.out.println(sqlQuery);

        try
        {
            dbConn = getDBConnection(URL,userID,userPASS);
            cmmtStmt = dbConn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            dbResults = cmmtStmt.executeQuery(sqlQuery); 
            
        }
        catch (SQLException e)
        {
            System.out.println(e.toString());
        }

    }
    public static Connection getDBConnection(String url, 

            String user, 
            String pass) throws SQLException

    {
        OracleDataSource ds = new OracleDataSource();
        ds.setURL(url);
        return ds.getConnection(user, pass);
    }

}
